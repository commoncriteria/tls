<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>
<?xml-model href="https://github.com/commoncriteria/transforms/raw/master/schemas/CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?> 

<PP xmlns="http://common-criteria.rhcloud.com/ns/cc" name="TLS"
    xmlns:h="http://www.w3.org/1999/xhtml">
  <!-- <inline-comment color='green'> Hello World TLS </inline-comment> -->
  <!-- <inline-comment color='blue' linebreak='yes'> Hello World TLS </inline-comment> -->
  <PPReference title="PP Reference">
    <ReferenceTable>
      <PPTitle>Extended Package for Transport Layer Security (TLS)</PPTitle>
      <PPVersion>1.0</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2016-07-10</PPPubDate>
      <PPCertificationID>unassigned</PPCertificationID>
      <CCVersion>3.1R4</CCVersion>
      <Keywords>TLS</Keywords>
      <entry>
        <name>Registration</name>
        <description>National Information Assurance Partnership</description>
      </entry>
    </ReferenceTable>
  </PPReference>

  <RevisionHistory role="draft">
    <entry>
      <version>Round 1</version>
      <date>2016-05-10</date>
      <subject>First draft for TC review</subject>
    </entry>
  </RevisionHistory>

  <RevisionHistory role="final">
    <entry>
      <version>1.0</version>
      <date>2016-07-10</date>
      <subject>Initial Release</subject>
    </entry>
  </RevisionHistory>

  <chapter title="Introduction" id="int">
    <section title="Overview" id="ppoverview"> 
      Transport Layer Security (TLS) is a cryptographic protocola designed to provide communications security over a computer network. Several versions of the protocol are in widespread use in applications such as web browsers, email, Internet faxing, instant messaging, and voice-over-IP (VoIP). Major web sites use TLS to secure all communications between their servers and web browsers. Major Operating Systems and hardware vendors also make use of TLS to provide secure communications between hosts and devices.
      <h:br/> 
      The primary goal of the TLS protocol is to provide privacy and data integrity between two communicating products. 
      <h:br/> 
      TLS supports many different methods for exchanging keys, encrypting data, and authenticating message integrity. As a result, secure configuration of TLS involves many configurable parameters, and not all choices provide all of the privacy-related properties described in the list above.
      <h:br/> 
      This Extended Package (EP) provides a baseline set of Securtiy Fuctional Requirments (SFRs) for products that implement TLS, regardless of the composition of the underlying platform. The requirments are intended to improve the secuirty of products by encoruaging the use of correctly configured TLS parameters. 
      <h:br/> 
      To a product to claim conformence against the following PPs and cPPs it must also be conforment against this EP:
      <h:br/> 
      QQQLIST OF PP/CPP that must be conformentQQQ
      <h:br/> 
    </section>
    <section title="Terms" id="glossary"> The following sections provide both Common Criteria and
      technology terms used in this Protection Profile. <subsection title="Common Criteria Terms"
        id="ccterms">
        <glossary>
          <entry>
            <term><abbr title="Common Criteria">CC</abbr></term>
            <description>Common Criteria for Information Technology Security
              Evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="Common Evaluation Methodology">CEM</abbr></term>
            <description>Common Evaluation Methodology for Information Technology Security
              Evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="Protection Profile">PP</abbr></term>
            <description>An implementation-independent set of security requirements for a category
              of products.</description>
          </entry>
          <entry>
            <term><abbr title="Security Target">ST</abbr></term>
            <description>A set of implementation-dependent security requirements for a specific
              product.</description>
          </entry>
          <entry>
            <term><abbr title="Target of Evaluation">TOE</abbr></term>
            <description>
	      The product under evaluation. In this case, the Operating System as described in section 
	      <xref linkend="TOEboundary"/> and its
              supporting documentation.
	    </description>
          </entry>
          <entry>
            <term><abbr title="TOE Security Functionality">TSF</abbr></term>
            <description>The security functionality of the product under evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Summary Specification">TSS</abbr></term>
            <description>A description of how a <abbr linkend="TOE"/> satisfies the SFRs in a <abbr
                linkend="ST"/>. </description>
          </entry>
          <entry>
            <term><abbr title="Security Functional Requirement">SFR</abbr></term>
            <description>A requirement for security enforcement by the <abbr linkend="TOE"/>.
            </description>
          </entry>
          <entry>
            <term><abbr title="Security Assurance Requirement">SAR</abbr></term>
            <description>A requirement to assure the security of the <abbr linkend="TOE"/>.
            </description>
          </entry>
        </glossary>
      </subsection>
      <subsection title="Technology Terms" id="techterms">
        <glossary>
          <entry>
            <term><abbr title="TLS"></abbr></term>
            <description>
              Transport Layer Security
	          </description>
          </entry>
        </glossary>
      </subsection>
	  </section>
    <section title="Use Cases" id="usecases">
      Requirements in this extended package are designed to address the security problems in the use cases below. These use cases are intentionally very broad, as TLS can be used to perform many tasks.  
      <usecases>
                <usecase title="Client-Server secure communciation" id="clientserver">
                    <description> 
                        TLS enables client-server products to communicate across a network in a way designed to prevent eavesdropping and tampering by providing an encrypted commincations channel that provides guranteed data integrity and privicy between the hosts.
                      </description>
                </usecase>
      </usecases>
    </section>
  </chapter>
  <chapter title="Conformance Claims" id="ccl">
    <cclaims>
      <cclaim id="Conformance Statement">
        <description> To be conformant to this PP, a <abbr linkend="ST"/> must demonstrate Exact
          Conformance, a subset of Strict Conformance as defined in <cite linkend="bibCC"/> Part 1
          (ASE_CCL). The <abbr linkend="ST"/> must include all components in this PP that are: <h:ul>
            <h:li>unconditional (which are always required)</h:li>
            <h:li>selection-based (which are required when certain <h:i>selections</h:i> are chosen in the
              unconditional requirements)</h:li>
          </h:ul>and may include components that are <h:ul>
            <h:li>optional or</h:li>
            <h:li>objective.</h:li>
          </h:ul>
          <InsertAppendixExplainer/> The <abbr linkend="ST"/> may iterate any of these components,
          but it must not include any additional component (e.g. from CC Part 2 or 3 or a PP not
          conformant with this one, or extended by the <abbr linkend="ST"/>) not defined in this PP
          or a PP conformant to this one. 
          <h:br/>
		  Some components in this Protection Profile have a dependency on
		  other components.  In accordance with <cite linkend="bibCC"/> Part 1, <appref linkend="satisfiedreqs"/> 
          includes justifications for those cases where the PP does not explicitly contain the component
		  upon which there is a dependency.
        </description>
      </cclaim>
    </cclaims>
  </chapter>
  <chapter title="Security Problem Definition" id="spd">The security problem is described in terms
    of the threats that the product is expected to address, assumptions about the
    operational environment, and any organizational security policies that the product
    is expected to enforce. <section title="Threats" id="threats">
      <threats>
        <threat id="T.TLS">
          <description> </description>
          <objective-refer ref="O.TLS">
            <rationale>The threat T.TLS is countered by O.TLS as this
              provides for .</rationale>
          </objective-refer>
        </threat>
      </threats>
    </section>
  </chapter>
  <chapter title="Security Objectives for the product" id="obj">
    <section title="Security Objectives for the TOE" id="SecurityObjectivesTOE">
      <SOs>
        <SO id="O.PROTECTED_COMMS">
          <description>
            To address both passive (eavesdropping) and active (packet modification) network attack threats, conformant products provide mechanisms to create trusted channels for CSP and sensitive data. Both CSP and sensitive data should not be exposed outside of the product. 
          </description>
          <!-- CHECK TO MAKE SURE THESE ARE ALL IN THE DOCUMET - Client -->
          <component-refer ref="fcs_tlsc_ext.1"/>
          <component-refer ref="fcs_tlsc_ext.3"/>
          <component-refer ref="fcs_tlsc_ext.4"/>
        <!-- CHECK TO MAKE SURE THESE ARE ALL IN THE DOCUMET -->
        </SO>
      </SOs>
    </section>

  </chapter>
  <chapter title="Security Requirements" id="req">This chapter describes the security requirements
    which have to be fulfilled by the product. Those requirements comprise functional
    components from Part 2 and assurance components from Part 3 of <cite linkend="bibCC"/>. The
    following notations are used: <h:ul>
      <h:li>
        <h:b>Refinement</h:b> operation (denoted by <h:b>bold text</h:b>): is used to add details to a
        requirement, and thus further restricts a requirement.</h:li>
      <h:li>
        <h:b>Selection</h:b> (denoted by <h:i>italicized text</h:i>): is used to select one or more options
        provided by the [CC] in stating a requirement.</h:li>
      <h:li>
        <h:b>Assignment</h:b> operation (denoted by <h:span class="assignable-content">italicized text</h:span>): is used to assign a
        specific value to an unspecified parameter, such as the length of a password. Showing the
        value in square brackets indicates assignment.</h:li>
      <h:li>
        <h:b>Iteration</h:b> operation: are identified with a number inside parentheses (e.g.
        "(1)")</h:li>
    </h:ul>
    <section title="Security Functional Requirements" id="SFRs">The Security Functional Requirements
      included in this section are derived from Part 2 of the Common Criteria for Information
      Technology Security Evaluation, Version 3.1, Revision 4, with additional extended functional
      components.
      <subsection title="TLS" id="TLS">
        <f-component id="fcs_tlsc_ext.1" name="TLS Client Protocol" status="threshold">
          <f-element id="fcs_tlsc_ext.1.1">
            <title> The product shall implement <abbr title="Transport Layer Security">TLS</abbr> 1.2
              (RFC 5246)  supporting the following cipher suites:
              <h:p/>Mandatory cipher suites: TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246
              <h:p/>Optional cipher suites: 
        <selectables linebreak="yes">
                <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_256_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>no other cipher suite</selectable>
              </selectables> . </title>
            <note role="application">The cipher suites to be tested in the evaluated configuration
              are limited by this requirement. The <abbr title="Security Target" linkend="ST">ST
              </abbr> author should select the optional cipher suites that are supported; if there
              are no cipher suites supported other than the mandatory suites, 
        then “No other cipher suite” should be selected. 
        It is necessary to limit the cipher suites that can be used in an evaluated
              configuration administratively on the server in the test environment. The Suite B
              algorithms listed above (RFC 6460) are the preferred algorithms for implementation.
              TLS_RSA_WITH_AES_128_CBC_SHA is required in order to ensure compliance with RFC 5246.
              <h:br/> These requirements will be revisited as new <abbr
                title="Transport Layer Security">TLS</abbr> versions are standardized by the IETF.
              <h:br/> If any cipher suites are selected using ECDHE, then <linkref
                linkend="FCS_TLSC_EXT.2.1"/> is required. 
            </note>
            <aactivity>
              The evaluator will check the description of the implementation of this
              protocol in the <abbr title="TOE Summary Specification" linkend="TSS">TSS</abbr> to
              ensure that the cipher suites supported are specified. The evaluator will check the
                <abbr title="TOE Summary Specification" linkend="TSS">TSS</abbr> to ensure that the
              cipher suites specified include those listed for this component. The evaluator will
              also check the operational guidance to ensure that it contains instructions on
              configuring The product so that
              TLS conforms to the description in the <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr>. The evaluator will also perform the following tests: 
              <testlist>
                <test> 
                  The evaluator will establish a <abbr title="Transport Layer Security">TLS</abbr> connection 
                  using each of the cipher suites specified by the
                  requirement. This connection may be established as part of the establishment of a
                  higher-level protocol, e.g., as part of an EAP session. It is sufficient to
                  observe the successful negotiation of a cipher suite to satisfy the intent of the
                  test; it is not necessary to examine the characteristics of the encrypted traffic
                  in an attempt to discern the cipher suite being used (for example, that the
                  cryptographic algorithm is 128-bit AES and not 256-bit AES). 
                </test>
                <test> 
                  The evaluator will attempt to establish the connection using a server with a
                  server certificate that contains the Server Authentication purpose in the
                  extendedKeyUsage field and verify that a connection is established. The evaluator
                  will then verify that the client rejects an otherwise valid server certificate
                  that lacks the Server Authentication purpose in the extendedKeyUsage field and a
                  connection is not established. Ideally, the two certificates should be identical
                  except for the extendedKeyUsage field. 
                </test>
                <test> 
                  The evaluator will send a server certificate in the <abbr title="Transport Layer Security">TLS</abbr> connection 
                  that does not match the server-selected cipher suite (for example, send a ECDSA certificate while using the
                  TLS_RSA_WITH_AES_128_CBC_SHA cipher suite or send a RSA certificate while using one
                  of the ECDSA cipher suites.) The evaluator will verify that The product disconnects after
                  receiving the server’s Certificate handshake message. 
                </test>
                <test> 
                  The evaluator will configure the server to select the
                  TLS_NULL_WITH_NULL_NULL cipher suite and verify that the client denies the
                  connection. 
                </test>
                <test> 
                  The evaluator will perform the following modifications to the traffic: 
                  <testlist>
                    <test> 
                      Change the <abbr title="Transport Layer Security">TLS</abbr> version
                      selected by the server in the Server Hello to a non-supported <abbr 
                      title="Transport Layer Security">TLS</abbr> version (for example 1.3
                      represented by the two bytes 03 04) and verify that the client rejects the
                      connection. 
                    </test>
                    <test>
                      Modify at least one byte in the server’s nonce in the Server Hello
                      handshake message, and verify that the client rejects the Server Key Exchange
                      handshake message (if using a DHE or ECDHE cipher suite) or that the server
                      denies the client’s Finished handshake message. 
                    </test>
                    <test>
                      Modify the server’s selected cipher suite in the Server Hello handshake
                      message to be a cipher suite not presented in the Client Hello handshake
                      message. The evaluator will verify that the client rejects the connection
                      after receiving the Server Hello.
                    </test>
                    <test>
                      Modify the signature block in the Server’s Key Exchange handshake
                      message, and verify that the client rejects the connection after receiving the
                      Server Key Exchange message.
                    </test>
                    <test> 
                      Modify a byte in the Server Finished handshake message, and verify that
                      the client sends a fatal alert upon receipt and does not send any application
                      data. 
                    </test>
                    <test>
                      Send a garbled message from the Server after the Server has issued the
                      Change Cipher Spec message and verify that the client denies the connection.
                    </test>
                  </testlist>
                </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="fcs_tlsc_ext.1.2">
            <title> The product shall verify that the presented identifier matches the reference
              identifier according to RFC 6125. </title>
            <note role="application"> The rules for verification of identity are described in
              Section 6 of RFC 6125. The reference identifier is established by the user (e.g.
              entering a URL into a web browser or clicking a link), by configuration (e.g.
              configuring the name of a mail server or authentication server), or by an application
              (e.g. a parameter of an API) depending on The product service. Based on a singular
              reference identifier’s source domain and application service type (e.g. HTTP, SIP,
              LDAP), the client establishes all reference identifiers which are acceptable, such as
              a Common Name for the Subject Name field of the certificate and a (case-insensitive)
              DNS name, URI name, and Service Name for the Subject Alternative Name field. The
              client then compares this list of all acceptable reference identifiers to the
              presented identifiers in the <abbr title="Transport Layer Security">TLS</abbr>
              server’s certificate. <h:br/> The preferred method for verification is the Subject
              Alternative Name using DNS names, URI names, or Service Names. Verification using the
              Common Name is required for the purposes of backwards compatibility. Additionally,
              support for use of IP addresses in the Subject Name or Subject Alternative name is
              discouraged, as against best practices, but may be implemented. Finally, the client
              should avoid constructing reference identifiers using wildcards. However, if the
              presented identifiers include wildcards, the client must follow the best practices
              regarding matching; these best practices are captured in the assurance activity. 
            </note>
            <aactivity> 
              The evaluator will ensure that the <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr> describes the client’s method of establishing all reference
              identifiers from the application-configured reference identifier, including which
              types of reference identifiers are supported (e.g. Common Name, DNS Name, URI Name,
              Service Name, or other application-specific Subject Alternative Names) and whether IP
              addresses and wildcards are supported. The evaluator will ensure that this
              description identifies whether and the manner in which certificate pinning is
              supported or used by the product.
              <h:br/> The evaluator will verify that the AGD guidance includes instructions for
              setting the reference identifier to be used for the purposes of certificate validation
              in <abbr title="Transport Layer Security">TLS</abbr>. <h:br/> The evaluator will
              configure the reference identifier according to the AGD guidance and perform the
              following tests during a <abbr title="Transport Layer Security">TLS</abbr> connection: 
              <testlist>
                <test> The evaluator will present a server certificate that does not contain an
                  identifier in either the Subject Alternative Name (SAN) or Common Name (CN) that
                  matches the reference identifier. The evaluator will verify that the connection
                  fails. 
                </test>
                <test> 
                  The evaluator will present a server certificate that contains a CN that
                  matches the reference identifier, contains the SAN extension, but does not contain
                  an identifier in the SAN that matches the reference identifier. The evaluator
                  shall verify that the connection fails. The evaluator will repeat this test for
                  each supported SAN type. 
                </test>
                <test> 
                  The evaluator will present a server certificate that contains a CN that
                  matches the reference identifier and does not contain the SAN extension. The
                  evaluator will verify that the connection succeeds. 
                </test>
                <test> 
                  The evaluator will present a server certificate that contains a CN that does
                  not match the reference identifier but does contain an identifier in the SAN that
                  matches. The evaluator will verify that the connection succeeds. 
                </test>
                <test> 
                  The evaluator will perform the following wildcard tests with each supported
                  type of reference identifier: 
                  <testlist>
                    <test>
                      The evaluator will present a server certificate containing a wildcard
                      that is not in the left-most label of the presented identifier (e.g.
                      foo.*.example.com) and verify that the connection fails. 
                    </test>
                    <test>
                      The evaluator will present a server certificate containing a wildcard in
                      the left-most label but not preceding the public suffix (e.g. *.example.com).
                      The evaluator will configure the reference identifier with a single left-most
                      label (e.g. foo.example.com) and verify that the connection succeeds. The
                      evaluator will configure the reference identifier without a left-most label
                      as in the certificate (e.g. example.com) and verify that the connection fails.
                      The evaluator will configure the reference identifier with two left-most
                      labels (e.g. bar.foo.example.com) and verify that the connection fails. 
                    </test>
                    <test> 
                      The evaluator will present a server certificate containing a wildcard in
                      the left-most label immediately preceding the public suffix (e.g. *.com). The
                      evaluator will configure the reference identifier with a single left-most
                      label (e.g. foo.com) and verify that the connection fails. The evaluator will
                      configure the reference identifier with two left-most labels (e.g.
                      bar.foo.com) and verify that the connection fails. 
                    </test>
                  </testlist>
                </test>
                <test> 
                  [conditional] If URI or Service name reference identifiers are supported, the
                  evaluator will configure the <abbr title="Domain Name System">DNS</abbr> name and
                  the service identifier. The evaluator will present a server certificate
                  containing the correct <abbr title="Domain Name System">DNS</abbr> name and
                  service identifier in the URIName or SRVName fields of the SAN and verify that the
                  connection succeeds. The evaluator will repeat this test with the wrong service
                  identifier (but correct <abbr title="Domain Name System">DNS</abbr> name) and
                  verify that the connection fails. 
                </test>
                <test> 
                  [conditional] If pinned certificates are supported the evaluator will
                  present a certificate that does not match the pinned certificate and verify that
                  the connection fails. 
                </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="fcs_tlsc_ext.1.3">
            <title>The product shall only establish a trusted channel if the peer certificate is valid. </title>
            <note role="application"> Validity is determined by the identifier verification,
              certificate path, the expiration date, and the revocation status in accordance with
              RFC 5280. Certificate validity shall be tested in accordance with testing performed
              for <linkref linkend="FIA_X509_EXT.1"/>. <h:br/> For <abbr
                title="Transport Layer Security">TLS</abbr> connections, this channel shall not be
              established if the peer certificate is invalid.
      </note>
            <aactivity> The evaluator will use <abbr title="Transport Layer Security">TLS</abbr> as
              a function to verify that the validation rules in <linkref linkend="FIA_X509_EXT.1.1"
              /> are adhered to and shall perform the following additional test: <testlist>
                <test> The evaluator will demonstrate that a peer using a certificate without a
                  valid certification path results in an authenticate failure. Using the
                  administrative guidance, the evaluator will then load the trusted CA
                  certificate(s) needed to validate the peer's certificate, and demonstrate that the
                  connection succeeds. The evaluator then shall delete one of the CA certificates,
                  and show that the connection fails. </test>
                <test> The evaluator will demonstrate that a peer using a certificate which has
                  been revoked results in an authentication failure. </test>
                <test> The evaluator will demonstrate that a peer using a certificate which has
                  passed its expiration date results in an authentication failure. </test>
                <test> the evaluator will demonstrate that a peer using a certificate which does
                  not have a valid identifier shall result in an authentication failure. </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="fcs_tlsc_ext.1.4">
            <title> The product shall present the Supported Elliptic Curves Extension in the Client Hello
              with the following NIST curves: <selectables>
                <selectable>secp256r1</selectable>
                <selectable>secp384r1</selectable>
                <selectable>secp521r1</selectable>
              </selectables> and no other curves. </title>
            <note role="application"> This requirement limits the elliptic curves allowed for
              authentication and key agreement to the NIST curves from <linkref
                linkend="FCS_COP.1(3)"/> and <linkref linkend="FCS_CKM.1"/> and <linkref
                  linkend="FCS_CKM.2"/>. This extension is required for clients supporting Elliptic
              Curve cipher suites. </note>
            <aactivity> The evaluator will verify that <abbr title="TOE Summary Specification"
              linkend="TSS">TSS</abbr> describes the supported Elliptic Curves Extension and
              whether the required behavior is performed by default or may be configured. If the
              <abbr title="TOE Summary Specification" linkend="TSS">TSS</abbr> indicates that the
              supported Elliptic Curves Extension must be configured to meet the requirement, the
              evaluator will verify that AGD guidance includes configuration of the supported
              Elliptic Curves Extension. <h:br/> The evaluator will also perform the following test: 
              <h:br/>
              The evaluator will configure the server to perform an ECDHE key exchange
              message in the <abbr title="Transport Layer Security">TLS</abbr> connection using
              a non-supported ECDHE curve (for example, P-192) and shall verify that The product disconnects after
              receiving the server's Key Exchange handshake message. 
            </aactivity>
          </f-element>          
        </f-component>
        
        <f-component id="fcs_tlsc_ext.3" name="TLS Client Protocol" status="objective">
          <f-element id="fcs_tlsc_ext.3.1">
            <title> The product shall present the signature_algorithms extension in the Client Hello with
              the supported_signature_algorithms value containing the following hash algorithms: <selectables>
                <selectable>SHA256</selectable>
                <selectable>SHA384</selectable>
                <selectable>SHA512</selectable>
              </selectables> and no other hash algorithms. </title>
            <note role="application"> This requirement limits the hashing algorithms supported for
              the purpose of digital signature verification by the client and limits the server to
              the supported hashes for the purpose of digital signature generation by the server.
              The signature_algorithm extension is only supported by <abbr
                title="Transport Layer Security">TLS</abbr> 1.2. </note>
            <aactivity> The evaluator will verify that <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr> describes the signature_algorithm extension and whether the
              required behavior is performed by default or may be configured. If the <abbr
                title="TOE Summary Specification" linkend="TSS">TSS</abbr> indicates that the
              signature_algorithm extension must be configured to meet the requirement, the
              evaluator will verify that AGD guidance includes configuration of the
              signature_algorithm extension. <h:br/> The evaluator will also perform the following
              test:
              <h:br/>
                The evaluator will configure the server to send a certificate in the <abbr
                title="Transport Layer Security">TLS</abbr> connection that is not supported
                according to the Client’s HashAlgorithm enumeration within the
                signature_algorithms extension (for example, send a certificate with a SHA-1
                signature). The evaluator will verify that The product disconnects after receiving the server’s Certificate
                handshake message.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_tlsc_ext.4" name="TLS Client Protocol" status="optional">
          <f-element id="fcs_tlsc_ext.4.1">
            <title> The product shall support mutual authentication using X.509v3 certificates. </title>
            <note role="application"> The use of X.509v3 certificates for <abbr
                title="Transport Layer Security">TLS</abbr> is addressed in <linkref
                linkend="FIA_X509_EXT.2.1"/>. This requirement adds that a client must be capable of
              presenting a certificate to a <abbr title="Transport Layer Security">TLS</abbr> server
              for <abbr title="Transport Layer Security">TLS</abbr> mutual authentication. </note>
            <aactivity> The evaluator will ensure that the <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr> description required per <linkref
                linkend="FIA_X509_EXT.2.1"/> includes the use of client-side certificates for TLS
              mutual authentication. <h:br/> The evaluator will verify that the AGD guidance required
              per <linkref linkend="FIA_X509_EXT.2.1"/> includes instructions for configuring the
              client-side certificates for <abbr title="Transport Layer Security">TLS</abbr> mutual
              authentication. <h:br/> The evaluator will also perform the following test: 
              <h:br/>
              Configure the server to require mutual authentication and then modify a
              byte in a CA field in the Server’s Certificate Request handshake message. The
              modified CA field must not be the CA used to sign the client’s certificate.
              The evaluator will verify the connection is unsuccessful.
            </aactivity>
          </f-element>
          <f-element id="fcs_tlsc_ext.4.2">
            <title> The TSF shall support secure renegotiation through use of the “renegotiation_info” TLS extension in accordance with RFC 5746. </title>
            
            <aactivity> SOMETHING HERE
            </aactivity>
          </f-element> 
          <f-element id="fcs_tlsc_ext.4.3">
            <title> The TSF shall include (choose only one of) 
              <selectables>
                <selectable>renegotiation_info extension</selectable>
                <selectable>TLS_EMPTY_RENEGOTIATION_INFO_SCSV ciphersuite</selectable>
              </selectables> in the ClientHello message. </title>
            
            Application Note: RFC 5746 defines an extension to TLS that binds renegotiation handshakes to the cryptography in the original handshake.  
            The ciphersuite included in the selection is a means for clients to be compatible with servers that don’t support the extension.  It is recommended that client implementations support both the ciphersuite and the extension.
            
            <aactivity> 
              The evaluator shall perform the following tests:
              <testlist>
                <test>The evaluator shall use a network packet analyzer/sniffer to capture the traffic between the two TLS endpoints.  The evaluator shall verify that either the “renegotiation_info” field or the SCSV ciphersuite is included in the ClientHello packet during the initial handshake.</test> 
                <test>The evaluator shall verify the Client’s handling of ServerHello messages received during the initial handshake that include the “renegotiation_info” extension.  The evaluator shall modify the length portion of this field in the ServerHello message to be non-zero and verify that the client sends a failure and terminates the connection.  The evaluator shall verify that a properly formatted field results in a successful TLS connection.</test>
                <test>The evaluator shall verify that ServerHello messages received during secure renegotiation contain the “renegotiation_info” extension.  The evaluator shall modify either the “client_verify_data” or “server_verify_data” value and verify that the client terminates the connection.</test>
              </testlist>
            </aactivity>
          </f-element>          
        </f-component>
        <f-component id="FCS_TLSS_EXT.1" name="TLS Server Protocol" status="threshold">
          <f-element id="fcs_tlss_ext.1.1">
            <title> The product shall implement <abbr title="Transport Layer Security">TLS</abbr> 1.2
              (RFC 5246)  supporting the following cipher suites:
              <h:p/>Mandatory cipher suites: TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246
              <h:p/>Optional cipher suites: 
              <selectables linebreak="yes">
                <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_256_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>no other cipher suite</selectable>
              </selectables> . </title>
            <note role="application">The cipher suites to be tested in the evaluated configuration
              are limited by this requirement. The <abbr title="Security Target" linkend="ST">ST
              </abbr> author should select the optional cipher suites that are supported; if there
              are no cipher suites supported other than the mandatory suites, 
              then “No other cipher suite” should be selected. 
              It is necessary to limit the cipher suites that can be used in an evaluated
              configuration administratively on the server in the test environment. The Suite B
              algorithms listed above (RFC 6460) are the preferred algorithms for implementation.
              TLS_RSA_WITH_AES_128_CBC_SHA is required in order to ensure compliance with RFC 5246.
              <h:br/> These requirements will be revisited as new <abbr
                title="Transport Layer Security">TLS</abbr> versions are standardized by the IETF.
              <h:br/> If any cipher suites are selected using ECDHE, then <linkref
                linkend="FCS_TLSC_EXT.2.1"/> is required. 
            </note>
            <aactivity>
              The evaluator will check the description of the implementation of this
              protocol in the <abbr title="TOE Summary Specification" linkend="TSS">TSS</abbr> to
              ensure that the cipher suites supported are specified. The evaluator will check the
              <abbr title="TOE Summary Specification" linkend="TSS">TSS</abbr> to ensure that the
              cipher suites specified include those listed for this component. The evaluator will
              also check the operational guidance to ensure that it contains instructions on
              configuring The product so that
              TLS conforms to the description in the <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr>. The evaluator will also perform the following tests: 
              <testlist>
                <test> 
                  The evaluator will establish a <abbr title="Transport Layer Security">TLS</abbr> connection 
                  using each of the cipher suites specified by the
                  requirement. This connection may be established as part of the establishment of a
                  higher-level protocol, e.g., as part of an EAP session. It is sufficient to
                  observe the successful negotiation of a cipher suite to satisfy the intent of the
                  test; it is not necessary to examine the characteristics of the encrypted traffic
                  in an attempt to discern the cipher suite being used (for example, that the
                  cryptographic algorithm is 128-bit AES and not 256-bit AES). 
                </test>
                <test> 
                  The evaluator will attempt to establish the connection using a server with a
                  server certificate that contains the Server Authentication purpose in the
                  extendedKeyUsage field and verify that a connection is established. The evaluator
                  will then verify that the client rejects an otherwise valid server certificate
                  that lacks the Server Authentication purpose in the extendedKeyUsage field and a
                  connection is not established. Ideally, the two certificates should be identical
                  except for the extendedKeyUsage field. 
                </test>
                <test> 
                  The evaluator will send a server certificate in the <abbr title="Transport Layer Security">TLS</abbr> connection 
                  that does not match the server-selected cipher suite (for example, send a ECDSA certificate while using the
                  TLS_RSA_WITH_AES_128_CBC_SHA cipher suite or send a RSA certificate while using one
                  of the ECDSA cipher suites.) The evaluator will verify that The product disconnects after
                  receiving the server’s Certificate handshake message. 
                </test>
                <test> 
                  The evaluator will configure the server to select the
                  TLS_NULL_WITH_NULL_NULL cipher suite and verify that the client denies the
                  connection. 
                </test>
                <test> 
                  The evaluator will perform the following modifications to the traffic: 
                  <testlist>
                    <test> 
                      Change the <abbr title="Transport Layer Security">TLS</abbr> version
                      selected by the server in the Server Hello to a non-supported <abbr 
                        title="Transport Layer Security">TLS</abbr> version (for example 1.3
                      represented by the two bytes 03 04) and verify that the client rejects the
                      connection. 
                    </test>
                    <test>
                      Modify at least one byte in the server’s nonce in the Server Hello
                      handshake message, and verify that the client rejects the Server Key Exchange
                      handshake message (if using a DHE or ECDHE cipher suite) or that the server
                      denies the client’s Finished handshake message. 
                    </test>
                    <test>
                      Modify the server’s selected cipher suite in the Server Hello handshake
                      message to be a cipher suite not presented in the Client Hello handshake
                      message. The evaluator will verify that the client rejects the connection
                      after receiving the Server Hello.
                    </test>
                    <test>
                      Modify the signature block in the Server’s Key Exchange handshake
                      message, and verify that the client rejects the connection after receiving the
                      Server Key Exchange message.
                    </test>
                    <test> 
                      Modify a byte in the Server Finished handshake message, and verify that
                      the client sends a fatal alert upon receipt and does not send any application
                      data. 
                    </test>
                    <test>
                      Send a garbled message from the Server after the Server has issued the
                      Change Cipher Spec message and verify that the client denies the connection.
                    </test>
                  </testlist>
                </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="fcs_tlss_ext.1.2">
            <title> The product shall verify that the presented identifier matches the reference
              identifier according to RFC 6125. </title>
            <note role="application"> The rules for verification of identity are described in
              Section 6 of RFC 6125. The reference identifier is established by the user (e.g.
              entering a URL into a web browser or clicking a link), by configuration (e.g.
              configuring the name of a mail server or authentication server), or by an application
              (e.g. a parameter of an API) depending on The product service. Based on a singular
              reference identifier’s source domain and application service type (e.g. HTTP, SIP,
              LDAP), the client establishes all reference identifiers which are acceptable, such as
              a Common Name for the Subject Name field of the certificate and a (case-insensitive)
              DNS name, URI name, and Service Name for the Subject Alternative Name field. The
              client then compares this list of all acceptable reference identifiers to the
              presented identifiers in the <abbr title="Transport Layer Security">TLS</abbr>
              server’s certificate. <h:br/> The preferred method for verification is the Subject
              Alternative Name using DNS names, URI names, or Service Names. Verification using the
              Common Name is required for the purposes of backwards compatibility. Additionally,
              support for use of IP addresses in the Subject Name or Subject Alternative name is
              discouraged, as against best practices, but may be implemented. Finally, the client
              should avoid constructing reference identifiers using wildcards. However, if the
              presented identifiers include wildcards, the client must follow the best practices
              regarding matching; these best practices are captured in the assurance activity. 
            </note>
            <aactivity> 
              The evaluator will ensure that the <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr> describes the client’s method of establishing all reference
              identifiers from the application-configured reference identifier, including which
              types of reference identifiers are supported (e.g. Common Name, DNS Name, URI Name,
              Service Name, or other application-specific Subject Alternative Names) and whether IP
              addresses and wildcards are supported. The evaluator will ensure that this
              description identifies whether and the manner in which certificate pinning is
              supported or used by the product.
              <h:br/> The evaluator will verify that the AGD guidance includes instructions for
              setting the reference identifier to be used for the purposes of certificate validation
              in <abbr title="Transport Layer Security">TLS</abbr>. <h:br/> The evaluator will
              configure the reference identifier according to the AGD guidance and perform the
              following tests during a <abbr title="Transport Layer Security">TLS</abbr> connection: 
              <testlist>
                <test> The evaluator will present a server certificate that does not contain an
                  identifier in either the Subject Alternative Name (SAN) or Common Name (CN) that
                  matches the reference identifier. The evaluator will verify that the connection
                  fails. 
                </test>
                <test> 
                  The evaluator will present a server certificate that contains a CN that
                  matches the reference identifier, contains the SAN extension, but does not contain
                  an identifier in the SAN that matches the reference identifier. The evaluator
                  shall verify that the connection fails. The evaluator will repeat this test for
                  each supported SAN type. 
                </test>
                <test> 
                  The evaluator will present a server certificate that contains a CN that
                  matches the reference identifier and does not contain the SAN extension. The
                  evaluator will verify that the connection succeeds. 
                </test>
                <test> 
                  The evaluator will present a server certificate that contains a CN that does
                  not match the reference identifier but does contain an identifier in the SAN that
                  matches. The evaluator will verify that the connection succeeds. 
                </test>
                <test> 
                  The evaluator will perform the following wildcard tests with each supported
                  type of reference identifier: 
                  <testlist>
                    <test>
                      The evaluator will present a server certificate containing a wildcard
                      that is not in the left-most label of the presented identifier (e.g.
                      foo.*.example.com) and verify that the connection fails. 
                    </test>
                    <test>
                      The evaluator will present a server certificate containing a wildcard in
                      the left-most label but not preceding the public suffix (e.g. *.example.com).
                      The evaluator will configure the reference identifier with a single left-most
                      label (e.g. foo.example.com) and verify that the connection succeeds. The
                      evaluator will configure the reference identifier without a left-most label
                      as in the certificate (e.g. example.com) and verify that the connection fails.
                      The evaluator will configure the reference identifier with two left-most
                      labels (e.g. bar.foo.example.com) and verify that the connection fails. 
                    </test>
                    <test> 
                      The evaluator will present a server certificate containing a wildcard in
                      the left-most label immediately preceding the public suffix (e.g. *.com). The
                      evaluator will configure the reference identifier with a single left-most
                      label (e.g. foo.com) and verify that the connection fails. The evaluator will
                      configure the reference identifier with two left-most labels (e.g.
                      bar.foo.com) and verify that the connection fails. 
                    </test>
                  </testlist>
                </test>
                <test> 
                  [conditional] If URI or Service name reference identifiers are supported, the
                  evaluator will configure the <abbr title="Domain Name System">DNS</abbr> name and
                  the service identifier. The evaluator will present a server certificate
                  containing the correct <abbr title="Domain Name System">DNS</abbr> name and
                  service identifier in the URIName or SRVName fields of the SAN and verify that the
                  connection succeeds. The evaluator will repeat this test with the wrong service
                  identifier (but correct <abbr title="Domain Name System">DNS</abbr> name) and
                  verify that the connection fails. 
                </test>
                <test> 
                  [conditional] If pinned certificates are supported the evaluator will
                  present a certificate that does not match the pinned certificate and verify that
                  the connection fails. 
                </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="fcs_tlss_ext.1.3">
            <title>The product shall only establish a trusted channel if the peer certificate is valid. </title>
            <note role="application"> Validity is determined by the identifier verification,
              certificate path, the expiration date, and the revocation status in accordance with
              RFC 5280. Certificate validity shall be tested in accordance with testing performed
              for <linkref linkend="FIA_X509_EXT.1"/>. <h:br/> For <abbr
                title="Transport Layer Security">TLS</abbr> connections, this channel shall not be
              established if the peer certificate is invalid.
            </note>
            <aactivity> The evaluator will use <abbr title="Transport Layer Security">TLS</abbr> as
              a function to verify that the validation rules in <linkref linkend="FIA_X509_EXT.1.1"
              /> are adhered to and shall perform the following additional test: <testlist>
                <test> The evaluator will demonstrate that a peer using a certificate without a
                  valid certification path results in an authenticate failure. Using the
                  administrative guidance, the evaluator will then load the trusted CA
                  certificate(s) needed to validate the peer's certificate, and demonstrate that the
                  connection succeeds. The evaluator then shall delete one of the CA certificates,
                  and show that the connection fails. </test>
                <test> The evaluator will demonstrate that a peer using a certificate which has
                  been revoked results in an authentication failure. </test>
                <test> The evaluator will demonstrate that a peer using a certificate which has
                  passed its expiration date results in an authentication failure. </test>
                <test> the evaluator will demonstrate that a peer using a certificate which does
                  not have a valid identifier shall result in an authentication failure. </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="fcs_tlss_ext.1.4">
            <title> The product shall present the Supported Elliptic Curves Extension in the Client Hello
              with the following NIST curves: <selectables>
                <selectable>secp256r1</selectable>
                <selectable>secp384r1</selectable>
                <selectable>secp521r1</selectable>
              </selectables> and no other curves. </title>
            <note role="application"> This requirement limits the elliptic curves allowed for
              authentication and key agreement to the NIST curves from <linkref
                linkend="FCS_COP.1(3)"/> and <linkref linkend="FCS_CKM.1"/> and <linkref
                  linkend="FCS_CKM.2"/>. This extension is required for clients supporting Elliptic
              Curve cipher suites. </note>
            <aactivity> The evaluator will verify that <abbr title="TOE Summary Specification"
              linkend="TSS">TSS</abbr> describes the supported Elliptic Curves Extension and
              whether the required behavior is performed by default or may be configured. If the
              <abbr title="TOE Summary Specification" linkend="TSS">TSS</abbr> indicates that the
              supported Elliptic Curves Extension must be configured to meet the requirement, the
              evaluator will verify that AGD guidance includes configuration of the supported
              Elliptic Curves Extension. <h:br/> The evaluator will also perform the following test: 
              <h:br/>
              The evaluator will configure the server to perform an ECDHE key exchange
              message in the <abbr title="Transport Layer Security">TLS</abbr> connection using
              a non-supported ECDHE curve (for example, P-192) and shall verify that The product disconnects after
              receiving the server's Key Exchange handshake message. 
            </aactivity>
          </f-element>          
        </f-component>
        
        <f-component id="fcs_tlss_ext.3" name="TLS Server Protocol" status="objective">
          <f-element id="fcs_tlss_ext.3.1">
            <title> The product shall present the signature_algorithms extension in the Client Hello with
              the supported_signature_algorithms value containing the following hash algorithms: <selectables>
                <selectable>SHA256</selectable>
                <selectable>SHA384</selectable>
                <selectable>SHA512</selectable>
              </selectables> and no other hash algorithms. </title>
            <note role="application"> This requirement limits the hashing algorithms supported for
              the purpose of digital signature verification by the client and limits the server to
              the supported hashes for the purpose of digital signature generation by the server.
              The signature_algorithm extension is only supported by <abbr
                title="Transport Layer Security">TLS</abbr> 1.2. </note>
            <aactivity> The evaluator will verify that <abbr title="TOE Summary Specification"
              linkend="TSS">TSS</abbr> describes the signature_algorithm extension and whether the
              required behavior is performed by default or may be configured. If the <abbr
                title="TOE Summary Specification" linkend="TSS">TSS</abbr> indicates that the
              signature_algorithm extension must be configured to meet the requirement, the
              evaluator will verify that AGD guidance includes configuration of the
              signature_algorithm extension. <h:br/> The evaluator will also perform the following
              test:
              <h:br/>
              The evaluator will configure the server to send a certificate in the <abbr
                title="Transport Layer Security">TLS</abbr> connection that is not supported
              according to the Client’s HashAlgorithm enumeration within the
              signature_algorithms extension (for example, send a certificate with a SHA-1
              signature). The evaluator will verify that The product disconnects after receiving the server’s Certificate
              handshake message.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_tlss_ext.4" name="TLS Server Protocol" status="optional">
          <f-element id="fcs_tlss_ext.4.1">
            <title> The product shall support mutual authentication using X.509v3 certificates. </title>
            <note role="application"> The use of X.509v3 certificates for <abbr
              title="Transport Layer Security">TLS</abbr> is addressed in <linkref
                linkend="FIA_X509_EXT.2.1"/>. This requirement adds that a client must be capable of
              presenting a certificate to a <abbr title="Transport Layer Security">TLS</abbr> server
              for <abbr title="Transport Layer Security">TLS</abbr> mutual authentication. </note>
            <aactivity> The evaluator will ensure that the <abbr title="TOE Summary Specification"
              linkend="TSS">TSS</abbr> description required per <linkref
                linkend="FIA_X509_EXT.2.1"/> includes the use of client-side certificates for TLS
              mutual authentication. <h:br/> The evaluator will verify that the AGD guidance required
              per <linkref linkend="FIA_X509_EXT.2.1"/> includes instructions for configuring the
              client-side certificates for <abbr title="Transport Layer Security">TLS</abbr> mutual
              authentication. <h:br/> The evaluator will also perform the following test: 
              <h:br/>
              Configure the server to require mutual authentication and then modify a
              byte in a CA field in the Server’s Certificate Request handshake message. The
              modified CA field must not be the CA used to sign the client’s certificate.
              The evaluator will verify the connection is unsuccessful.
            </aactivity>
          </f-element>
          <f-element id="fcs_tlss_ext.4.2">
            <title> The TSF shall support secure renegotiation through use of the “renegotiation_info” TLS extension in accordance with RFC 5746. </title>
            
            <aactivity> SOMETHING HERE
            </aactivity>
          </f-element> 
          <f-element id="fcs_tlss_ext.4.3">
            <title> The TSF shall include (choose only one of) 
              <selectables>
                <selectable>renegotiation_info extension</selectable>
                <selectable>TLS_EMPTY_RENEGOTIATION_INFO_SCSV ciphersuite</selectable>
              </selectables> in the ClientHello message. </title>
            
            Application Note: RFC 5746 defines an extension to TLS that binds renegotiation handshakes to the cryptography in the original handshake.  
            The ciphersuite included in the selection is a means for clients to be compatible with servers that don’t support the extension.  It is recommended that client implementations support both the ciphersuite and the extension.
            
            <aactivity> 
              The evaluator shall perform the following tests:
              <testlist>
                <test>The evaluator shall use a network packet analyzer/sniffer to capture the traffic between the two TLS endpoints.  The evaluator shall verify that either the “renegotiation_info” field or the SCSV ciphersuite is included in the ClientHello packet during the initial handshake.</test> 
                <test>The evaluator shall verify the Client’s handling of ServerHello messages received during the initial handshake that include the “renegotiation_info” extension.  The evaluator shall modify the length portion of this field in the ServerHello message to be non-zero and verify that the client sends a failure and terminates the connection.  The evaluator shall verify that a properly formatted field results in a successful TLS connection.</test>
                <test>The evaluator shall verify that ServerHello messages received during secure renegotiation contain the “renegotiation_info” extension.  The evaluator shall modify either the “client_verify_data” or “server_verify_data” value and verify that the client terminates the connection.</test>
              </testlist>
            </aactivity>
          </f-element>                    
        </f-component>
      </subsection>
    </section>
  </chapter>

  <appendix title="Optional Requirements" id="optional"> As indicated in <secref linkend="ccl"/>,
    the baseline requirements (those that must be performed by the <abbr linkend="OS"/>) are
    contained in the body of this PP. Additionally, there are three other types of requirements
    specified in <appref linkend="optional"/>, <appref linkend="sel-based"/>, and <appref
      linkend="objective"/>. The first type (in this Appendix) are requirements that can be included
    in the <abbr linkend="ST"/>, but are not required in order for a OS to claim conformance to
    this PP. The second type (in <appref linkend="sel-based"/>) are requirements based on selections
    in the body of the PP: if certain selections are made, then additional requirements in that
    appendix must be included. The third type (in <appref linkend="objective"/> are components that
    are not required in order to conform to this PP, but will be included in the baseline
    requirements in future versions of this PP, so adoption by vendors is encouraged. Note that the
    ST author is responsible for ensuring that requirements that may be associated with those in
      <appref linkend="optional"/>, <appref linkend="sel-based"/>, and <appref linkend="objective"/>
    but are not listed (e.g., FMT-type requirements) are also included in the ST. </appendix>

  <appendix title="Selection-Based Requirements" id="sel-based"> As indicated in the introduction to
    this PP, the baseline requirements (those that must be performed by The product or its underlying
    platform) are contained in the body of this PP. There are additional requirements based on
    selections in the body of the PP: if certain selections are made, then additional requirements
    below will need to be included. </appendix>

  <appendix title="Objective Requirements" id="objective"> This appendix includes requirements that
    specify security functionality which also addresses threats. The requirements are not currently
    mandated in the body of this PP as they describe security functionality not yet widely-available
    in commercial technology. However, these requirements may be included in the ST such that the
    OS is still conformant to this PP, and it is expected that they be included as soon as
    possible. </appendix>

  

  <appendix title="Acronyms" id="acronyms">
    <acronyms>
      <entry>
        <term>AES</term>
        <description>Advanced Encryption Standard</description>
      </entry>
    </acronyms>
  </appendix>
</PP>
