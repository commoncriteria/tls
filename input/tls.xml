<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>

<!-- <Package name="TLS" repo-name="tls" pp-version="1.1"  -->
<Package name="TLS"
    xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"
    xmlns:h="http://www.w3.org/1999/xhtml"
    >
  <!-- <inline-comment color='green'> Hello World TLS </inline-comment> -->
  <!-- <inline-comment color='blue' linebreak='yes'> Hello World TLS </inline-comment> -->
  <PPReference>
    <ReferenceTable>
      <PPTitle>Functional Package for Transport Layer Security (TLS)</PPTitle>
      <PPVersion>2.0-draft</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2022-08-24</PPPubDate>
      <Keywords>TLS</Keywords>
    </ReferenceTable>
  </PPReference>

  <RevisionHistory>
    <entry>
      <version>1.0</version>
      <date>2018-12-17</date>
      <subject>First publication</subject>
    </entry>
    <entry>
      <version>1.1</version>
      <date>2019-03-01</date>
      <subject>Clarifications regarding override for invalid certificates,
      renegotiation_info extension, DTLS versions, and named Diffie-Hellman groups in DTLS
      contexts</subject>
    </entry>
     <entry>
      <version>2.0</version>
      <date>2022-08-24</date>
      <subject>Added audit events, added TLS 1.3 support, deprecated TLS 1.0 and 1.1, updated algorithms/ciphersuites in accordance with CNSA suite RFC and to consider PSK, restructed SFRs for clarity</subject>
    </entry>

	  
  </RevisionHistory>
	
  <!-- PP-style preferences   -->
  <pp-preferences>
<!--        <pp-pref name="display-audit-with-sfrs">0</pp-pref> -->
   	<audit-events-in-sfrs/>
  </pp-preferences>

  <sec:Introduction>
    <sec:Overview>
      <h:p>      
	  Transport Layer Security (TLS) and the closely-related Datagram TLS (DTLS) are
    cryptographic protocols designed to provide communications security over IP networks.
    Several versions of the protocol are in widespread use in software that provides functionality
    such as web browsing, email, instant messaging, and voice-over-IP (VoIP).
    Major web sites use TLS to protect communications to and from their servers.
    TLS is also used to protect communications between
    hosts and network infrastructure devices for administration.
    The underlying platform, such as an operating system, often provides the
    actual TLS implementation.
    The primary goal of the TLS protocol is to
    provide confidentiality and integrity of data transmitted
    between two communicating endpoints, as well as authentication of at least
    the server endpoint.
    </h:p><h:p>
	  TLS supports many different methods for exchanging keys, encrypting data,
	  and authenticating message integrity. These methods are dynamically negotiated
    between the client and server when the TLS connection is established.
    As a result, evaluating the implementation of both endpoints is typically
    necessary to provide assurance for the operating environment.
    </h:p><h:p>
	  This "Functional Package for Transport Layer Security" (short name "TLS-PKG")
    defines functional requirements for the implementation of the Transport Layer Security (TLS)
    and Datagram TLS (DTLS) protocols. The requirements are
    intended to improve the security of products by enabling their evaluation.
  </h:p>
    </sec:Overview>
    <tech-terms>
      <term abbr="AES" full="Advanced Encryption Standard"/>
      <term abbr="CA" full="Certificate Authority">
	      Issuer of digital certificates
      </term>
      <term abbr="CA" full="Certificate Authority"/>
      <term abbr="CBC" full="Cipher Block Chaining"/>
      <term abbr="CN" full="Common Name"/>
      <term abbr="DHE" full="Diffie-Hellman Ephemeral"/>
      <term abbr="DN" full="Distinguished Name"/>
      <term abbr="DNS" full="Domain Name Server"/>
      <term abbr="DTLS" full="Datagram Transport Layer Security">
	      Cryptographic network protocol, based on TLS, which provides
              communications security for datagram protocols
	    </term>
      <term abbr="EAP" full="Extensible Authentication Protocol"/>
      <term abbr="ECDHE" full="Elliptic Curve Diffie-Hellman Ephemeral"/>
      <term abbr="ECDSA" full="Elliptic Curve Digital Signature Algorithm"/>
      <term abbr="GCM" full="Galois/Counter Mode"/>
      <term abbr="HTTP" full="Hypertext Transfer Protocol"/>
      <term abbr="IETF" full="Internet Engineering Task Force"/>
      <term abbr="IP" full="Internet Protocol"/>
      <term abbr="LDAP" full="Lightweight Directory Access Protocol"/>
      <term abbr="NIST" full="National Institute of Standards and Technology"/>
      <term abbr="RFC" full="Request for Comment (IETF)"/>
      <term abbr="RSA" full="Rivest Shamir Adelman"/>
      <term abbr="SAN" full="Subject Alternative Name"/>
      <term abbr="SCSV" full="Signaling ciphersuite Value"/>
      <term abbr="SHA" full="Secure Hash Algorithm"/>
      <term abbr="SIP" full="Session Initiation Protocol"/>
      <term abbr="TCP" full="Transmission Control Protocol"/>
      <term abbr="TLS" full="Transport Layer Security">
        Cryptographic network protocol for providing communications
        security over a TCP/IP network
      </term>
      <term abbr="UDP" full="User Datagram Protocol"/>
      <term abbr="URI" full="Uniform Resource Identifier"/>
      <term abbr="URL" full="Uniform Resource Locator"/>
    </tech-terms>

    <sec:Compliant_Targets_of_Evaluation>
      <h:p>
      The Target of Evaluation
      (TOE) in this Package is a product which acts as a TLS client or server, or both.
      This Package describes the security functionality of TLS in terms of   <xref g="CC" />. 
      </h:p><h:p>
      The contents of this Package must be appropriately
      combined with a PP or PP-Module.
      When this Package is instantiated by a PP or PP-Module, the Package must
      include selection-based requirements in accordance with the
      selections or assignments indicated in the PP or PP-Module.  These may be expanded by the
      the ST author.
      </h:p><h:p>
      The PP or PP-Module which instantiates this Package must typically include
      the following components in order to satisfy dependencies of this Package. It is the responsibility
      of the PP or PP-Module author who instantiates this Package to ensure that dependence
      on these components is satisfied:<h:br/>
      <componentsneeded>
        <componentneeded>
          <componentid>FCS_CKM.1</componentid>
          <notes>To support TLS ciphersuites that use RSA, DHE or ECDHE for key exchange, the PP or PP-Module must
            include FCS_CKM.1 and specify the corresponding key generation algorithm.</notes>
        </componentneeded>
      <componentneeded>
        <componentid>FCS_CKM.2</componentid>
        <notes>To support TLS ciphersuites that use RSA, DHE or ECDHE for key exchange, the PP or PP-Module must
          include FCS_CKM.2 and specify the corresponding algorithm.</notes>
      </componentneeded>
      <componentneeded>
        <componentid>FCS_COP.1</componentid>
        <notes>To support TLS ciphersuites that use AES for encryption/decryption, the PP or PP-module
          must include FCS_COP.1 (iterating as needed) and specify AES with corresponding key sizes and modes. To
          support TLS ciphersuites that use SHA for hashing, the PP or PP-Module must include FCS_COP.1
          (iterating as needed) and specify SHA with corresponding digest sizes.
        </notes>
      </componentneeded>
      <!-- The components in the PP or PP-Module that need this SFR should require it;
      it is not _directly_ depended upon by this Package.-->
      <componentneeded>
        <componentid>FCS_RBG_EXT.1</componentid>
        <notes>To support random bit generation needed for the TLS handshake,
          the PP or PP-Module must include FCS_RBG_EXT.1.</notes>
      </componentneeded>
      <componentneeded>
        <componentid>FIA_X509_EXT.1</componentid>
        <notes>
          To support validation of certificates needed during TLS connection setup,
          the PP or PP-Module must include FIA_X509_EXT.1.
        </notes>
      </componentneeded>
      <componentneeded>
        <componentid>FIA_X509_EXT.2</componentid>
        <notes>To support the use of X509 certificates for authentication in TLS connection setup,
          the PP or PP-Module must include FIA_X509_EXT.2.
          </notes>
      </componentneeded>
    </componentsneeded>
    </h:p><h:p>
      An ST must identify the applicable version of the PP or
      PP-Module and this Package in its conformance claims.
      </h:p>
      
    </sec:Compliant_Targets_of_Evaluation>

  </sec:Introduction>
  <sec:Conformance_Claims>
    <cclaims>
      <cclaim name="Conformance Statement">
        <description>
	  <h:p>
	    This Package serves to provide Protection Profiles with additional 
          SFRs and associated Evaluation Activities specific to TLS clients and servers.  
          </h:p><h:p>
          This Package conforms to Common Criteria
          <xref g="CC" /> for Information Technology Security Evaluation, Version 3.1,
          Revision 5. It is CC Part 2 extended conformant.
          </h:p><h:p>
          In accordance with CC Part 1, dependencies are not included when they are addressed
          by other SFRs. The evaluation activities provide adequate proof that any dependencies are
          also satisfied.</h:p></description>
      </cclaim>
    </cclaims>
  </sec:Conformance_Claims>
  
  <sec:Security_Functional_Requirements>
 <!--   This chapter describes the security requirements
    to be fulfilled by the product. Those requirements comprise functional components from Part 2 of
    <xref to="bibCC" />. The following notations are used:
    <h:ul>
      <h:li>
        <h:b>Selection</h:b> (denoted by
        <h:i>italicized text</h:i>): is used to select one or more options provided by the [CC] in stating
        a requirement.</h:li>
      <h:li>
        <h:b>Assignment</h:b> operation (denoted by
        <h:span class="assignable-content">italicized text</h:span>): is used to assign a specific 
        value to an unspecified parameter, such
        as the length of a password. Showing the value in square brackets indicates assignment.</h:li>
      <h:li>
        <h:b>Iteration</h:b> operation: are identified with a number inside parentheses (e.g. "(1)").</h:li>
    </h:ul> 
    <section title="Security Functional Requirements" id="SFRs">The Security Functional Requirements
      included in this section are derived from Part 2 of the Common Criteria for Information
      Technology Security Evaluation, Version 3.1, Revision 5, with additional extended functional
      components.-->
	  
 <sec:Auditable_Events_for_Mandatory_SFRs>
   <h:p>
     The auditable events specified in this Functional Package are included in a Security Target 
     if the incorporating PP or PP-Module supports audit event reporting through FAU_GEN.1 and all other criteria in the incorporating
     PP or PP-Module are met.
   </h:p>
   <audit-table table="mandatory" id="t-audit-mandatory"/>

 </sec:Auditable_Events_for_Mandatory_SFRs>
      <section title="Cryptographic Support (FCS)" id="fcs">
        <f-component cc-id="fcs_tls_ext.1" name="TLS Protocol">
          <f-element id="fel-tls-usage">
			<title>The product shall implement
        <selectables linebreak="yes">
          <selectable id="tlsc_impl">TLS as a client</selectable>
          <selectable id="tlss_impl">TLS as a server</selectable>
          <selectable id="dtlsc_impl">DTLS as a client</selectable>
          <selectable id="dtlss_impl">DTLS as a server</selectable>
        </selectables>.
        </title>
        <note role="application">
              If <h:i>TLS as a client</h:i> is selected, then the
              ST must include the requirements from FCS_TLSC_EXT.1.
              <h:br/>
              If <h:i>TLS as a server</h:i> is selected, then the
              ST must include the requirements from FCS_TLSS_EXT.1.
              <h:br/><h:br/>
              If <h:i>DTLS as a client</h:i> is selected, then the
              ST must include the requirements from FCS_DTLSC_EXT.1.
              <h:br/>
              If <h:i>DTLS as a server</h:i> is selected, then the
              ST must include the requirements from FCS_DTLSS_EXT.1.
            </note>
            <aactivity>
              <TSS>
                The evaluator shall examine the TSS to verify that the TLS and DTLS claims are consistent with those selected in the SFR.<h:p/>
              </TSS>
	      <Guidance>
		The evaluator shall ensure that the selections indicated in the ST are
		consistent with selections in the dependent components.<h:p/>
	      </Guidance>
              <Tests>
                There are no test activities for this SFR; the following informatnio is provided as an overview of the expected functionality and test environment for all subsequent SFRs.
                <h:p/>
                <figure entity="images/figure1.png" title="TLS Hello" id="Hello"/>
                <h:p/>
                The chart above provides an overview of the TLS hello messages, 
                the content and protections, and the establishment of cryptographic keys in support of the protections. 
                Blue text indicates a message or content unique to TLS 1.2; green text indicates uniqueness to TLS 1.3; 
                and black text indicates features common to both TLS 1.2 and TLS 1.3. 
                Bold text indicates mandatory features; italics emphasizes optional features. 
                A shaded text box indicates that the message is encrypted for TLS 1.2 (blue), TLS 1.3 (green) or both TLS 1.2 and TLS 1.3 (grey). 
                An outlined text box indicates that the content in the message is signed, and/or provides authentication of the handshake to that point. 
                <h:p/>
                <h:b>Test Environment:</h:b>
                <h:p/>
                Tests for TLS 1.2 and TLS 1.3 include examination of the handshake messages and behavior of the TSF when presented with unexpected or invalid messages. 
                For TLS 1.2 and below, previous versions of this Functional Package only required visibility of network traffic and the ability to modify a valid handshake message sent to the TSF.
                <h:p/>
                <figure entity="images/figure2.png" title="Test Scenario 1" id="Figure2"/>
                <h:p/>
                TLS 1.3 introduces the encryption of handshake messages subsequent to the server hello exchange which prevents visibility and control using midpoint capabilities. 
                To achieve equivalent validation of TLS 1.3 requires the ability to modify the traffic underlying the encryption applied after the server hello message. 
                This can be achieved by introducing additional control of the messages sent, and visibility of messages received by the test TLS client, 
                when validating TLS server functionality or test server, when validating TLS client functionality.
                <h:p/>
                <figure entity="images/figure3.png" title="Test Scenario 2" id="Figure3"/>
                <h:p/>
                Typically, a compliant TLS 1.3 library modified to provide visibility and control of the handshake messages prior to encryption suffices for all tests. 
                Such modification will require the test client and/or server to be validated. 
                <h:p/>
                Since validations of products supporting only TLS 1.2 are still expected under this package, 
                the test environment for TLS 1.2 only validations may include network sniffers and ‘man-in-the-middle’ products that do not require such modifications to a compliant TLS 1.2 library. 
                For consistency, a compliant TLS client (or TLS server) together with the network sniffers and man-in-the-middle capabilities 
                will also be referred to as a test TLS client (or test TLS server, respectively) in the following evaluation activities.
                <h:p/>
                <figure entity="images/figure4.png" title="Test Scenario 3" id="Figure4"/>
              </Tests>
            </aactivity>
          </f-element>
	  <audit-event />
        </f-component>

        <f-component cc-id="fcs_tlsc_ext.1" name="TLS Client Protocol" status="sel-based">
		  <depends on-sel="tlsc_impl"/>
          <f-element id="fel-client">
            <title> The product shall implement TLS 1.2 (RFC 5246) and
              <selectables>
                <selectable>TLS 1.3 (RFC 8446)</selectable>
                <selectable exclusive='yes'>no other TLS version</selectable>
              </selectables> as a client that supports additional functionality for session renegotiation protection and
              <selectables linebreak="yes">
                <selectable id="tlsc_mutual_auth">mutual authentication</selectable>
                <selectable id="tlsc_downgrade_protection">supplemental downgrade protection</selectable>
                <selectable id="tlsc_resumption">session resumption</selectable>
                <selectable>no optional functionality</selectable></selectables>
              and shall abort attempts by a server to negotiate all other TLS or SSL versions. 
            </title>
            <note role="application">
              Session renegotiation protection is required for both TLS 1.2 and TLS 1.3, and the ST must include the requirements from FCS_TLSC_EXT.4. Within FCS_TLS_EXT.4, 
              options for implementation of secure session renegotiation for TLS 1.2, or rejecting renegotiation requests are claimed.  
              <h:p/>
              The ST author will claim TLS 1.3 functionality if supported, and optional functionality as appropriate for the claimed versions. 
              <h:p/>
              If mutual authentication is selected, then the ST must additionally include the requirements from FCS_TLSC_EXT.2. If the TOE implements mutual authentication, this selection must be made.
              <h:p/>
              If supplemental downgrade protection is selected, then the ST must additionally include the requirements from FCS_TLSC_EXT.3. This is claimed if TLS 1.3 is supported, or if the product supports TLS 1.1 or below downgrade protection using the mechanism described in RFC 8446.
              <h:p/>
              If session resumption is selected, then the ST must additionally include the requirements from FCS_TLSC_EXT.5.  
            </note>
          </f-element>
          <f-element>
            <title>
              The TSF shall be able to support the following TLS 1.2 ciphersuites:
          <selectables linebreak="yes">
            <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (RFC5289, RFC8422)</selectable>
            <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (RFC5289, RFC8422)</selectable>
            <selectable>TLS_RSA_WITH_AES_256_GCM_SHA384 (RFC5288)</selectable>
            <selectable>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (RFC5288)</selectable>
            <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
            <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
            <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
            <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
            <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
            <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
            <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
            <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
            <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
            <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
            <selectable>TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
            <selectable>PP-specific ciphersuites using pre-shared secrets including <selectables linebreak="yes">
              <selectable>TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442</selectable>
              <selectable>TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487</selectable>
              <selectable>TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487</selectable>
              <selectable>TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442</selectable>
              <selectable>TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487</selectable>
              <selectable>TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487</selectable></selectables></selectable>
            <selectable>the following TLS 1.3 ciphersuites: <selectables linebreak="yes">
              <selectable>TLS_AES_256_GCM_SHA384 [RFC8446]</selectable>
              <selectable>TLS_AES_128_GCM_SHA_256 [RFC8446]</selectable>
              <selectable><assignable>other TLS 1.3 ciphersuites]</assignable></selectable></selectables></selectable></selectables>
              offering the supported ciphersuites in a client hello message in preference order: 
              <assignable>list of supported ciphersuites</assignable>.
          </title>
            <note role="application">
              The ST author should select the ciphersuites that are supported, and must select at least one ciphersuite for each TLS version supported. 
              The ciphersuites to be tested in the evaluated configuration are limited by this requirement. 
              However, this requirement does not restrict the TOE's ability to propose additional non-deprecated ciphersuites beyond the ones listed in this requirement 
              in its Client Hello message as indicated in the ST. 
              That is, the TOE may propose any ciphersuite not excluded by this element, 
              but the evaluation will only test ciphersuites from the above list. 
              It is necessary to limit the ciphersuites that can be used in an evaluated configuration administratively on the server in the test environment. 
              TLS 1.3 ciphersuites are claimed if support for TLS 1.3 is claimed in FCS_TLSC_EXT.1.1. 
              The assignment of preference order provides an ordered list of all supported ciphersuites with the most preferred ciphersuites listed first. 
              ciphersuites listed in [RFC TBD, “CNSA Suite TLS Profile”] are preferred over all other ciphersuites, 
              GCM ciphersuites are preferred over CBC ciphersuites, ECDHE preferred over RSA and DHE, and SHA256 or SHA384 over SHA. 
              <h:p/>
              ciphersuites for TLS 1.2 are of the form TLS_{key exchange algorithm}_WITH_{encryption algorithm}_(message digest algorithm}, and are listed in the TLS parameters section of the internet assignments at iana.org. 
            </note>
          </f-element>
          <f-element>
          <title>
            The TSF shall not offer the following ciphersuites: 
            <h:ul>
              <h:li>ciphersuites indicating null encryption component.</h:li>
              <h:li>ciphersuites indicating support for anonymous servers.</h:li>
              <h:li>ciphersuites indicating use of deprecated or export-grade cryptography including DES, 3DES, RC2, RC4, or IDEA for encryption.</h:li>
              <h:li>ciphersuites indicating use of MD</h:li>
            </h:ul> and shall abort sessions where a server attempts to negotiate ciphersuites not enumerated in the client hello message.
          </title>
          </f-element>
          <f-element>
         <title>
           The product shall be able to support the following TLS client hello message extensions: 
           <h:ul>
             <h:li>signature_algorithms extension (RFC 8446) indicating support for 
               <selectables linebreak="yes">
                 <selectable>ecdsa-secp284r1_sha384 (RFC 8446)</selectable>
                 <selectable>rsa_psks1_sha384 (RFC 8446)</selectable></selectables>, and <selectables linebreak="yes">
                   <selectable>rsa_pss_pss_sha384 (RFC 8603)</selectable>
                   <selectable>rsa_pss_rsae_sha384 (RFC 8603)</selectable>
                   <selectable><assignable>other non-deprecated signature algorithms</assignable></selectable>
                   <selectable>no other signature algorithms</selectable></selectables>
             </h:li>
             <h:li>
               extended_master_secret extension (RFC 7627) enforcing server support
             </h:li>
             <h:li>
               <selectables linebreak="yes">
                 <selectable>signature_algorithms_cert extension (RFC 8446) indicating support for <selectables linebreak="yes">
                   <selectable>ecdsa-secp384r1_sha384 (RFC 8446)</selectable>
                   <selectable>rsk_psks1_sha384 (RFC 8446)</selectable></selectables>, and <selectables linebreak="yes">
                     <selectable>rsa_pss_pss_sha384 (RFC 8603)</selectable>
                     <selectable>rsa_pss_rsae_sha384 (RFC 8603)</selectable>
                     <selectable>rsa_pkcs1_sha256 (RFC 8446)</selectable>
                     <selectable>rsa_pss_rsae_sha256 (RFC 8446)</selectable>
                     <selectable><assignable>other non-deprecated signature algorithms</assignable></selectable>
                     <selectable>no other signature algorithms</selectable>
                 </selectables></selectable>
                 <selectable>supported_versions extension (RFC 8446) indicating support for TLS 1.3</selectable>
                 <selectable>supported_groups extension (RFC 7919, RFC 8446) indicating support for <selectables linebreak="yes">
                   <selectable>secp256r1</selectable>
                   <selectable>secp384r1</selectable>
                   <selectable>secp521r1</selectable>
                   <selectable>ffdhe2048(256)</selectable>
                   <selectable>ffdhe3072(257)</selectable>
                   <selectable>ffdhe4096(258)</selectable>
                   <selectable>ffdhe6144(259)</selectable>
                   <selectable>ffdhe8192(260)</selectable></selectables></selectable>
                 <selectable>key_share extension (RFC 8446)</selectable>
                 <selectable>post_handshake_auth (RFC 8446), pre_shared_key (RFC 8446) and psk_key_exchange_mode (RFC 8446) indicating DHE or ECDHE mode</selectable></selectables>
               and shall not send the following extensions: <h:ul>
                 <h:li>early_data</h:li>
                 <h:li>psk_key_exchange_mode indicating PSK only mode.</h:li>
               </h:ul>
             </h:li>
           </h:ul>
         </title>
         <note role="application">
           If TLS 1.3 is claimed in FCS_TLSC_EXT.1.1, supported_versions, supported_groups, and key_share extensions are claimed in accordance with RFC 8446. 
           If TLS 1.3 is not claimed, supported_versions and key_share extensions are not claimed. 
           Other extensions may be supported; certain extensions may be required to claim based on other SFR claims made.
           <h:p/>
           If ECDHE ciphersuites are claimed in FCS_TLSC_EXT.1.2, the supported_groups extension is claimed here with appropriate secp groups claimed. 
           If DHE ciphersuites are claimed in FCS_TLSC_EXT.1.2, it is preferred that the appropriate ffdhe groups be claimed here. 
           In a subsequent version of this FP, support for ffdhe groups will be required whenever DHE ciphersuites are claimed. 
           <h:p/>
           When ‘other non-deprecated signature algorithms’ is claimed, 
           the assignment will describe the standard signature and hash algorithms supported. 
           MD5 and SHA-1 hashes are deprecated and are not included in the signature_algorithms or signature_algorithms_cert extensions.
         </note>
          </f-element>
          <f-element>
            <title>
              The TSF shall be able to <selectables linebreak="yes">
              <selectable>verify that a presented identifier of name type: <selectables linebreak="yes">
                <selectable>DNS, name type according to RFC 6125</selectable>
                <selectable>URN, name type according to RFC 6125</selectable> 
                <selectable>SRV name type according to RFC 6125</selectable>
                <selectable>Common Name conversion to DNS name according to RFC 6125</selectable>
                <selectable>Directory name type according to RFC 5280</selectable>
                <selectable>IPaddress name type according to RFC 5280</selectable>
                <selectable>rfc822Name type according to RFC 5280</selectable>
                <selectable><assignable>other name type</assignable></selectable></selectables></selectable>  
              <selectable>interface with a client application requesting the TLS channel to verify that a presented identifier</selectable></selectables> 
              matches a reference identifier of the requested TLS server and shall abort the session if no match is found.
            </title>
            <note role="application">
              The rules for verification identity are described in Section 6 of RFC 6125 and Section 7 of RFC 5280. 
              The reference identifier is established by the user (e.g. entering a URL into a web browser or clicking a link), 
              by configuration (e.g. configuring the name of a mail server or authentication server), 
              or by an application (e.g. a parameter of an API) depending on the product service. 
              The client establishes all reference identifiers which are acceptable and interfaces with the TLS implementation to provide acceptable reference identifiers, 
              or to accept the presented identifiers as validated in the server’s certificate. 
              If the product performs matching of the reference identifiers to the identifiers provided in the server’s certificate, 
              the first option is claimed and all supported name types are claimed; if the product presents the certificate, 
              or the presented identifiers from the certificate to the application, the second option is claimed. 
              <h:p/>
              In most cases where TLS servers are represented by DNS-type names, 
              the preferred method for verification is the Subject Alternative Name using DNS names, URI names, or Service Names. 
              Verification using a conversion of the Common Name relative distinguished name from a DNS name type in the subject field is allowed for the purposes of backwards compatibility. 
              <h:p/>
              Finally, the client should avoid constructing reference identifiers using wildcards. 
              However, if the presented identifiers include wildcards, the client must follow the best practices regarding matching; 
              these best practices are captured in the evaluation activity. Support for other name types is rare, but may be claimed for specific applications. 
            </note>
          </f-element>
          <f-element>
            <title>
              The TSF shall not establish a trusted channel if the server certificate is invalid <selectables>
                <selectable>with no exceptions</selectable>
                <selectable>except when override is authorized in the case where valid revocation information is not available</selectable></selectables>. 
            </title>
            <note role="application">
              A certificate used in a manner that does not support revocation checking should not advertise revocation information locations. 
              Common methods to address this include revoking the issuing CA, 
              resetting certificate pinning mechanisms, or removing entries from trust stores. 
              Thus, a certificate that does not advertise revocation status information is considered to be not revoked and does not need to be processed via override mechanisms.  
              Override mechanisms are for use with certificates with published revocation status information that is not accessible, 
              whether temporarily or because the information cannot be accessed during the state of the TOE (e.g., for verifying signatures on boot code). 
              The circumstances should be described by the ST author, who should indicate the override mechanism and conditions that apply to the override, including system state, user/admin actions, etc. 
            </note>
         
            <aactivity>
              <TSS>
                The evaluator shall check the description of the implementation of this protocol in the TSS to ensure the supported TLS versions, features, ciphersuites, and extensions 
                are specified in accordance with RFC 5246 (TLS 1.2) and RFC 8446 (TLS 1.3 and updates to TLS 1.2) and as refined in FCS_TLSC_EXT.1 as appropriate. 
                <h:p/>
                The evaluator shall verify that ciphersuites indicated in FCS_TLSC_EXT.1.2 are included in the description and that no ciphersuites 
                indicating ‘NULL,’ ‘RC2,’ ‘RC4,’ ‘DES,’ ‘IDEA,’ or ‘TDES’ in the encryption algorithm component, indicating ‘anon’, or indicating MD5 or SHA in the message digest algorithm component are supported.
                <h:p/>
                The evaluator shall verify that the TLS implementation description includes the extensions as required in FCS_TLSC_EXT.1.4.
                <h:p/>
                The evaluator shall verify that the ST describes applications that use the TLS functions and how they establish reference identifiers.
                <h:p/>
                The evaluator shall verify that ST includes a description of the name types parsed and matching methods supported for associating the server certificate to application defined reference identifiers.
                <h:p/>
	      </TSS>
              <Guidance>
                The evaluator shall check the operational guidance to ensure that it contains instructions on configuring the product so that TLS conforms to the description in the TSS and that 
                and any instructions on configuring the version, ciphersuites or optional extensions supported.
                <h:p/>
                The evaluator shall verify that all configurable features for matching identifiers in certificates presented in the TLS handshake are identified, including any application specific reference identifiers.
	      </Guidance>
              <Tests>
		The evaluator shall perform the following tests:
              <testlist>
                <!-- Test 1 and sub-tests -->
                <test>
                  (supported configurations) For each supported version, and for each supported ciphersuite associated with the version:
                  <h:p/>
                  The evaluator shall establish a TLS connection between the TOE and a test TLS server that is configured to negotiate the tested version and ciphersuite in accordance with the RFC for the version.
                  <h:p/>
                  The evaluator shall observe that the TSF presents a client hello with highest version/legacy version of 1.2 (value ‘03 03’) 
                  and shall observe that the supported version extension is not included for TLS 1.2, and, if TLS 1.3 is supported, is present and contains the value ’03 04’ for TLS 1.3. 
                  <h:p/>
                  The evaluator shall observe that the client hello indicates the supported ciphersuites in the order indicated, 
                  and that it includes only the extensions supported, with appropriate values, for that version in accordance with the requirement.
                  <h:p/>
                  The evaluator shall observe that the TOE successfully completes the TLS handshake.
                  <h:p/>
                  <h:b>Note:</h:b> TOEs supporting TLS 1.3, but allowing a server to negotiate TLS 1.2, 
                  should include all ciphersuites and all extensions as required for either version. 
                  If such a TOE is configurable to support only TLS 1.2, only TLS 1.3, or both TLS 1.2 and TLS 1.3, Test 1 should be performed in each configuration – with advertised ciphersuites appropriate for the configuration.
                  <h:p/>
                  <h:b>Note:</h:b> The connection in test 1 may be established as part of the establishment of a higher-level protocol, e.g., as part of an EAP session. 
                  <h:p/>
                  <h:b>Note:</h:b> It is sufficient to observe the successful negotiation of a ciphersuite to satisfy the intent of the test; 
                  it is not necessary to examine the characteristics of the encrypted traffic in an attempt to discern the ciphersuite being used 
                  (for example, that the cryptographic algorithm is 128-bit AES and not 256-bit AES).
                  <h:p/>
                </test>
                
                <!-- Test 2 and sub-tests -->
                <test>(obsolete versions) The evaluator shall perform the following tests:
                
                <testlist>
                  <test>For each of SSL version 3, TLS version 1.0, and TLS version 1.1, the evaluator shall initiate a TLS connection from the TOE 
                    to a test TLS server that is configured to negotiate the obsolete version and observe that the TSF terminates the connection.
                    <h:p/>
                    <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., protocol version, insufficient security) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                  </test>
                  <test>
                    The evaluator shall attempt to establish a connection with a test TLS server that is configured to send a server hello message indicating the selected version 
                    (referred to as the legacy version for TLS 1.3) with value corresponding to an undefined TLS (legacy) version 
                    (e.g., ’03 04’) and observe that the TSF terminates the connection.
                    <h:p/>
                    <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., protocol version) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                    <h:p/>
                    <h:b>Note:</h:b> Test 2.2 is intended to test the TSF response to non-standard versions, 
                    including early proposals for ‘beta TLS 1.3’ versions. 
                    RFC 8446 requires the legacy version to have the value ’03 03’ and specifies TLS 1.3 in the supported versions extension with value ’03 04’. 
                    While not a preferred approach, if continued support for a beta TLS 1.3 version is desired and the TSF cannot be configured to reject such versions, 
                    another value (e.g., ’03 05’) can be used in Test 2.2. Implementations of non-standard versions are not tested.
                  </test>
                </testlist>
                </test>
                
                <!-- Test 3 and sub-tests -->
                <test>
                  (ciphersuites)  The evaluator shall perform the following tests on handling unexpected ciphersuites using a test TLS server 
                  sending handshake messages compliant with the negotiated version except as indicated in the test: 
                  <testlist>
                    <test>(ciphersuite not offered) For each supported version, the evaluator shall attempt to establish a connection with a test TLS server configured to negotiate the supported version and a ciphersuite 
                      not included in the client hello and observe that the TOE rejects the connection.
                    <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., handshake failure) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                      <h:p/>
                      <h:b>Note:</h:b> This test intended to test the TSF’s generic ability to recognize non-offered ciphersuites. 
                      If the ciphersuites in the client hello are configurable, 
                      the evaluator shall configure the TSF to offer a ciphersuite outside those that are supported and use that ciphersuite in the test. 
                      If the TSF ciphersuite list is not configurable, it is acceptable to use a named ciphersuite from the IANA TLS protocols associated with the tested version. 
                      Additional special cases of this test for special ciphersuites are performed separately.
                    </test>
                    <test>(version confusion) For each supported version, 
                      the evaluator shall attempt to establish a connection with a test TLS server that is configured to negotiate the supported version 
                      and a ciphersuite that is not associated with that version and observe that the TOE rejects the connection.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., handshake failure) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                      <h:p/>
                      <h:b>Note:</h:b> It is intended that Test 3.2 use TLS 1.3 ciphersuites for a server negotiating TLS 1.2.  
                      If TLS 1.3 is supported, the test server negotiating TLS 1.3 should select a TLS 1.2 ciphersuite supported by the TOE for TLS 1.2 
                      and matching the client’s supported groups and signature algorithm indicated by extensions in the TLS 1.3 client hello. 
                      If the TOE is configurable to allow both TLS 1.2 and TLS 1.3 servers, the test server should use ciphersuites offered by the TSF in its client hello message.
                    </test>
                    <test>(null ciphersuite) For each supported version, the evaluator shall attempt to establish a connection with a test TLS server 
                      configured to negotiate the null ciphersuite (TLS_NULL_WITH_NULL_NULL) and observe that the TOE rejects the connection. 
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., handshake failure, insufficient security) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert).</test>
                    <test>(anon ciphersuite): The evaluator shall attempt to establish a TLS 1.2 connection with a test TLS server configured to negotiate a ciphersuite using the anonymous server authentication method, 
                      and observe that the TOE rejects the connection.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., handshake failure, insufficient security) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert).</test>
                    <h:p/>
                    <h:b>Note:</h:b> See IANA TLS parameters for available ciphersuites to be selected by the test TLS server. 
                    The test ciphersuite should use supported cryptographic algorithms for as many of the other components as possible. 
                    For example, if the TSF only supports the ciphersuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test server could select TLS_DH_ANON_WITH_AES_256_GCM_SHA_384.
                    <test>(deprecated encryption algorithm) For each deprecated encryption algorithm (NULL, RC2, RC4, DES,  IDEA, and TDES), 
                      the evaluator shall attempt to establish a TLS 1.2 connection with a test TLS server configured to negotiate a ciphersuite using the deprecated encryption algorithm, 
                      and observe that the TOE rejects the connection.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., handshake failure, insufficient security) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                      <h:p/>
                      <h:b>Note:</h:b> See IANA TLS parameters for available ciphersuites to be tested. The test ciphersuite should use supported cryptographic algorithms for as many of the other components as possible. 
                      For example, if the TSF only supports TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, the test server could select
                      TLS_ECDHE_PSK_WITH_NULL_SHA_384, TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 TLS_ECDHE_RSA_WITH_RC4_128_SHA, TLS_DHE_DSS_WITH_DES_CBC_SHA, TLS_RSA_WITH_IDEA_CBC_SHA, and TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA.  
                    </test>
                  </testlist>
                </test>
                
                <!-- Test 4 and sub-tests -->
                <test>(extensions) For each supported version indicated in the following tests, 
                  the evaluator shall establish a connection from the TOE with a test server negotiating the tested version and providing 
                  server handshake messages as indicated when performing the following tests for validating proper extension handling:
                <testlist>
                  <test>
                    (signature_algorithms) (conditional) If the TSF supports certificate-based server authentication, the evaluator shall perform the following tests:
                    <testlist>
                      <test>For each supported version, the evaluator shall initiate a TLS session with a TLS test server and observe that the TSF’s 
                        client hello includes the signature_algorithms extension with values in conformance with ST. </test>
                      <test>[conditional] (TLS 1.2 only) If the TSF supports an ECDHE or DHE ciphersuite, the evaluator shall ensure the test TLS server sends 
                        a compliant server hello message selecting TLS 1.2 and one of the supported ECDHE or DHE ciphersuites, 
                        a compliant server certificate message, and a key exchange message signed using a signature algorithm/hash combination not included in the client’s hello message 
                        (e.g., RSA with SHA-1). The evaluator shall observe that the TSF terminates the handshake.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., handshake failure, illegal parameter, decryption error) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                      </test>
                      <test>[conditional] If TLS 1.3 is supported, the evaluator shall ensure the test TLS server sends a compliant server hello message selecting TLS 1.3, 
                        and a server certificate message, 
                        but that it sends a certificate verification message using a signature algorithm method not included in the signature_algorithms extension. The evaluator shall observe that the TSF terminates the TLS handshake.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., handshake failure, illegal parameter, bad certificate, decryption error) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert).  
                      </test>
                      <test>
                        [conditional] For all supported versions for which signature_algorithm_certs is not supported, the evaluator shall ensure the test TLS server sends 
                        a compliant server hello message for the tested version and a server certificate message containing a valid certificate that represents the test TLS server, 
                        but which is signed using a signature and hash combination not included in the TSF’s signature_algorithms extension 
                        (e.g., a certificate signed using RSA and SHA-1). The evaluator shall observe that the TSF terminates the TLS session.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., unsupported certificate, bad certificate, decryption error, handshake failure) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert).  
                        <h:p/>
                        <h:b>Note:</h:b> Certificate-based server authentication is required unless the TSF only supports TLS with shared PSK. 
                        For TLS 1.2, this is the case if only TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 8442,
                        TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487,
                        TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 8442, or
                        TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487, are supported. For TLS 1.3, this is the case if only PSK handshakes are supported.
                      </test>
                    </testlist>
                  </test>
                  <test>[conditional] (signature_algorithms_cert) 
                    If signature_algorithm_cert is supported, then for each version that uses the signature_algorithms_cert extension, 
                    the evaluator shall ensure that the test TLS server sends a compliant server hello message selecting the tested version and indicating certificate-based server authentication. 
                    The evaluator shall ensure that the test TLS server forwards a certificate message containing a valid certificate that represents the test TLS server, 
                    but which is signed by a valid Certification Authority using a signature and hash combination not included in the TSF’s signature_algorithms_cert extension 
                    (e.g., a certificate signed using RSA and SHA-1). The evaluator shall confirm the TSF terminates the session.
                    <h:p/>
                    <h:b>Note:</h:b> Support for certificate based authentication is assumed if the signature_algorithm_cert is supported. 
                    For TLS 1.2, a non-PSK ciphersuite, or one of TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 as defined in RFC 5487, 
                    or TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 as defined in RFC 5487 is used to indicate certificate-based server authentication. 
                    For TLS 1.3, the test server completes a full handshake, even if a PSK is offered to indicate certificate-based server authentication. 
                    If the TSF only supports shared PSK authentication, test 4.2 is not performed.
                    <h:p/>
                    <h:b>Note:</h:b> for TLS 1.3, the server certificate message messages is encrypted. 
                    The evaluator will configure the test TLS server with the indicated certificate and ensure that the certificate is 
                    indeed sent by observing the buffer of messages to be encrypted, or by inspecting one or both sets of logs from the TSF and test TLS server.
                    <h:p/>
                    <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., unsupported certificate, bad certificate, decryption error, handshake failure) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                  </test>
                  <test>(extended_master_secret) (TLS 1.2 only) The evaluator shall initiate a TLS 1.2 session with a test TLS server configured to compute a master secret according to RFC 5246 section 8. 
                    The evaluator shall observe that the TSF’s client hello includes the extended master secret extension in accordance with RFC 7627, 
                    and assures that the test TLS server does not include the extended master secret extension in its server hello. 
                    The evaluator shall observe that the TSF terminates the session.
                    <h:p/>
                    <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., handshake failure) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                  </test>
                  <test>(supported_groups) (TLS 1.2 only – for TLS 1.3, testing is combined with testing of the keyshare extension)
                  <testlist>
                    <test>For each supported group, the evaluator shall initiate a TLS session with a compliant test TLS 1.2 server supporting RFC 7919. 
                      The evaluator shall ensure that the test TLS server is configured to select TLS 1.2 and a ciphersuite using the supported group. 
                      The evaluator shall observe that the TSF’s client hello lists the supported groups as indicated in the ST, and that the TSF successfully establishes the TLS session.</test>
                    <test>[conditional on TLS 1.2 support for ECDHE ciphersuites]  The evaluator shall initiate a TLS session with a test TLS server that is configured to use an explicit version of a named EC group supported by the client. 
                      The evaluator shall ensure that the test TLS server key exchange message includes the explicit formulation of the group in its key exchange message 
                      as indicated in RFC 4492 section 5.4. The evaluator shall confirm that the TSF terminates the session.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., illegal parameter) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                    </test>
                  </testlist>
                  </test>
                </testlist>
                </test>
                
                <!-- Test 5 and sub-tests -->
                <test>[conditional] (TLS 1.3 extensions) If the TSF supports TLS 1.3, the evaluator shall perform the following tests. 
                  For each test, the evaluator shall observe that the TSF’s client hello includes the supported versions extension with the value ’03 04’ indicating TLS 1.3:
                <testlist>
                  <test>(supported versions) The evaluator shall initiate TLS 1.3 sessions in turn from the TOE to a test TLS server configured as indicated in the sub-tests below: 
                  <testlist>
                    <test>The evaluator shall configure the test TLS server to include the supported versions extension in the server hello containing the value ’03 03’. The evaluator shall observe that the TSF terminates the TLS session.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., illegal parameter, handshake failure, protocol version) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert).   
                    </test>
                    <test>The evaluator shall configure the test TLS server to include the supported versions extension in the server hello containing the value ’03 04’ and complete a compliant TLS 1.3 handshake. 
                      The evaluator shall observe that the TSF completes the TLS 1.3 handshake successfully.</test>
                    <test>[conditional] If the TSF is configurable to support both TLS 1.2 and TLS 1.3, 
                      the evaluator shall follow operational guidance to configure this behavior. The evaluator shall assure the test TLS server sends a TLS 1.2 compliant server handshake and 
                      observe that the server random does not incidentally include any downgrade messaging. 
                      The evaluator shall observe that the TSF completes the TLS 1.2 handshake successfully.
                      <h:p/>
                      <h:b>Note:</h:b> Enhanced downgrade protection defined in RFC 8446 is optional and, if supported, is tested separately. 
                      The evaluator may configure the test server’s random, or may repeat the test until the server’s random does not match a downgrade indicator.
                    </test>
                  </testlist>
                  </test>
                  <test>(supported groups, key shares) The evaluator shall initiate TLS 1.3 sessions in turn with a test TLS server configured as indicated in the following sub-tests:</test>
                  <testlist>
                    <test>For each supported group, the evaluator shall configure the compliant test TLS 1.3 server to select a ciphersuite using the group. 
                      The evaluator shall observe that the TSF sends an element of the group in its client hello key shares extension 
                      (after a hello retry message from the test server if the key share for the group is not included in the initial client hello). 
                      The evaluator shall ensure the test TLS server sends an element of the group in its server hello and observes that the TSF completes the TLS handshake successfully.</test>
                    <test>For each supported group, the evaluator shall modify the server hello sent by the test TLS server to include an invalid key share value claiming 
                      to be an element the group indicated in the supported groups extension. 
                      The evaluator shall observe that the TSF terminates the TLS session.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., illegal parameter) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                      <h:p/>
                      <h:b>Note:</h:b> For DHE ciphersuites, a zero value, or a value greater or equal to the modulus is not a valid element. 
                      For ECDHE groups, an invalid point contains x and y coordinates of the correct size, 
                      but represents a point not on the curve; the evaluator can construct such an invalid point by modifying a byte in the y coordinate of a valid point and verify that the coordinates do not satisfy the curve equation.
                    </test>
                  </testlist>
                  <test>
                    (PSK support) [conditional] If the TSF supports pre-shared keys, the evaluator shall follow the operational guidance to configure the TSF to support pre-shared keys, 
                    shall establish a pre-shared key between the TSF and the test TLS server, and initiate TLS 1.3 sessions in turn 
                    between the TSF and the test TLS server configured as indicated in the following sub-tests:
                    <testlist>
                      <test>The evaluator shall configure the TSF to use the pre-shared key and assure the test TLS server functions as a compliant TLS 1.3 server.
                        The evaluator shall observe that the TSF’s client hello includes the pre_shared_key extension with the valid psk indicator shared with the test server. 
                        The evaluator shall also observe that the TSF’s client hello also includes the psk_key_exchange_mode and the post_handshake_auth extensions and that the psk_key_exchange_mode 
                        indicates one or more of DHE or ECDHE modes but does not include the PSK-only mode. 
                        The evaluator shall observe that the TSF completes the TLS 1.3 handshake successfully in accordance with RFC 8446, to include the TSF sending appropriate key shares for one or more of the supported groups.
                        <h:p/>
                        Once the handshake is successful, the evaluator shall cause the test TLS server to send a certificate request and observe that the TSF provides a certificate message and certificate verify message. 
                        <h:p/>
                        <h:b>Note:</h:b> It may be necessary to complete a standard handshake and send a new-ticket message from the test TLS server to establish a pre-shared key, 
                        or it might be possible to configure the pre-shared key manually via out-of-band mechanisms. 
                        This can be performed in conjunction with other testing that is not tested as part of this SFR. 
                        It is not required at this time to support emerging standards on establishing PSK, but as such standards are finalized, this FP may be updated to require such support.
                        <h:p/>
                        <h:b>Note:</h:b> TLS messages after the handshake are encrypted so it may not be possible to observe the certificate and certificate verify messages sent by the TSF directly. 
                        The evaluator may need to configure the test TLS server to use an application that requires post-handshake client authentication and 
                        terminates the session or otherwise has an observable effect if the certificate is not provided.
                      </test>
                      <test>The evaluator shall attempt to configure the TSF to send early data. 
                        If there is no indication from the TSF that this is blocked, the evaluator shall repeat test 
                        5.3.1 with the TSF so configured and observe that the TSF does not send application data prior to receiving the server hello. 
                        <h:p/>
                        <h:b>Note:</h:b> Early data will be encrypted under the PSK and received by the test TLS server prior it sending a server hello message. 
                      </test>
                    </testlist>
                  </test>
                </testlist>
                </test>
                
                <!-- Test 6 and sub-tests -->
                <test>(corrupt finished message) For each supported version, the evaluator shall initiate a TLS session from the TOE to a test TLS server that sends a compliant set of server handshake messages, 
                  except for sending a modified finished message 
                  (modify a byte of the finished message that would have been sent by a compliant server). 
                  The evaluator shall observe that the TSF terminates the session and does not complete the handshake by 
                  observing that the TSF does not send application data provided to the TLS channel.</test>
                
                <!-- Test 7 and sub-tests -->
                <test>(missing finished message) For each supported version, the evaluator shall initiate a session from the TOE to a test TLS server providing a compliant handshake, 
                  except for sending a random TLS message (the 5 byte header indicates a correct TLS message for the negotiated version, but not indicating a finished message) as the final message. 
                  The evaluator shall observe that the TSF terminates the session and does not send application data.
                  <h:p/>
                  <h:b>Note:</h:b> It is preferred that the TSF send a fatal decrypt error alert to terminate the session, but it is acceptable that the TSF terminate the connection without sending a fatal alert.
                  <h:p/>
                  <h:b>Note:</h:b> For TLS 1.2, the modified message is sent after the change_cipher_spec message. For TLS 1.3, the modified messages is sent as the last message of the server’s second flight of messages.
                </test>
                
                <!-- Test 8 and sub-tests -->
                <test>(unexpected/corrupt signatures within handshake) The evaluator shall perform the following tests, according to the versions supported.
                <testlist>
                  <test>(TLS 1.2 only) [conditional] If the ST indicates support for ECDSA or DSA ciphersuites, 
                    the evaluator shall initiate a TLS session with a compliant test TLS server and  modify the signature in the server key exchange. 
                    The evaluator shall observe that the TSF terminates the session with a fatal alert message (e.g., decrypt error, handshake error).</test>
                  <test>[conditional] If the ST indicates support for TLS 1.3, the evaluator shall initiate a TLS session between the TSF 
                    and a test TLS server configured to send compliant server hello message, encrypted extension message, and certificate message, 
                    but to send a certificate verify message with an invalid signature (modify a byte from a valid signature). 
                    The evaluator shall confirm that the TSF terminates the session with a fatal error alert message (e.g., bad certificate, decrypt error, handshake error).</test>
                  <test>[conditional] (TLS 1.2 only)  If the ST indicates support for both RSA and ECDSA methods in the signature_algorithm 
                    (or, if supported, the signature_algorithm_cert) extension, 
                    and if the ST indicates one or more TLS 1.2 ciphersuites indicating each of the RSA and ECDSA methods in its signature components, 
                    the evaluator shall select supported ciphersuites, cipher 1, indicating an RSA signature, and cipher 2, indicating an ECDSA signature, 
                    establish valid certificates trusted by the TSF to cert 1, representing the test TLS 1.2 server using an RSA signature, and cert 2, representing the test TLS 1.2 server using an ECDSA signature. 
                    The evaluator shall initiate a TLS session between the TSF and the test TLS 1.2 server configured to select cipher 1 and to send cert 2, 
                    and in turn initiate a TLS session with the test 1.2 TLS server configured to select cipher 2 and send cert 1. The evaluator shall observe that for each session, the TSF terminates the TLS session.
                    <h:p/>
                    <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., bad certificate, decryption error, handshake failure) in response to this, 
                    but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                  </test>
                </testlist>
                </test>
                
                <!-- Test 9 and sub-tests -->
                <test>
                  [conditional] If the TSF supports certificate-based server authentication, 
                  then for each supported version, the evaluator will initiate a TLS sessions from the TOE to the compliant test TLS server 
                  configured to negotiate the tested version, and to authenticate using a certificate trusted by the TSF as specified in the following:
                  <testlist>
                    <test>(certificate extended key usage purpose) The evaluator shall send a server certificate that contains the Server Authentication purpose in the extendedKeyUsage extension 
                      and verify that a connection is established. 
                      The evaluator shall repeat this test using a different, but otherwise valid and trusted, certificate that lacks the 
                      Server Authentication purpose in the extendedKeyUsage extension and observe the TSS terminates the session.
                      <h:p/>
                      Note: This test may be performed as part of certificate validation testing (FIA_X509_EXT.1).
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., hbad certificate, decryption error, handshake failure) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                      <h:p/>
                      <h:b>Note:</h:b> Ideally, the two certificates should be similar in regards to structure, the types of identifiers used, and the chain of trust.
                    </test>
                    <test>
                      (certificate identifiers) For each supported method of matching presented identifiers, 
                      and for each name type for which the TSF parses the presented identifiers from the server certificate for the method, 
                      the evaluator shall establish a valid certificate trusted by the TSF to represent the test server using only the tested name type. The evaluator shall perform the following sub-tests: 
                      <testlist>
                        <test>The evaluator shall prepare the TSF as necessary to use the matching method and establish reference identifier(s)
                          for the test server for the tested name type. The evaluator shall ensure the test TLS server sends a certificate with a matching name of the tested name type 
                          and observe that the TSF completes the connection.</test>
                        <test>The evaluator shall prepare the TSF as necessary to use the matching method and establish reference identifier(s) that do not match the name representing the test server. 
                          The evaluator shall ensure the test TLS server sends a certificate with a name of the type tested, and observe the TSF terminates the session.
                          <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., bad certificate, unknown certificate) in response to this, 
                          but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert).
                        </test>
                      </testlist>
                    </test>
                    <test>(mixed identifiers)[conditional] If the TSF supports a name matching method where the TSF performs matching of both CN-encoded name types and SAN names of the same type, 
                      then for each such method, and for eah such name type, the evaluator shall establish a valid certificate trusted by the TSF 
                      to represent the test server using one name for the CN-encoded name type and a different name for the SAN name type The evaluator shall perform the following tests: 
                    <testlist>
                      <test>The evaluator shall follow the operational guidance to configure the TSF to use the name matching method and establish reference identifiers matching only the SAN. 
                        The evaluator shall ensure that the test server sends the certificate with the matching SAN and non-matching CN-encoded name, and observe that the TSF completes the connection.
                        <h:p/>
                        <h:b>Note:</h:b> Configuration of the TSF may depend on the application using TLS.</test>
                      <test>The evaluator shall follow the operational guidance to configure the TSF to use the name matching method and establish reference identifiers matching only the CN-encoded name. 
                        The evaluator shall ensure that the test server sends the certificate with the matching SAN name and non-matching CN-encoded name, and observe that the TSF terminates the session.
                        <h:p/>
                        <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., bad certificate, unknown certificate) in response to this, 
                        but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert).  
                      </test>
                    </testlist>
                    </test>
                    <test>(empty certificate) The evaluator shall ensure the test TLS server supplies an empty Certificate message, and observe the TSF terminates the session.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., bad certificate, unknown certificate) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert).
                    </test>
                    <test>(invalid certificate) [conditional] If validity exceptions are supported, 
                      then  for each exception for certificate validity supported, 
                      the evaluator shall configure the TSF to allow the exception and ensure the test TLS server sends a certificate that is valid and trusted, 
                      except for the allowed exception. The evaluator shall observe that the TSF completes the session. 
                      <h:p/>
                      Without modifying the TSF configuration, the evaluator shall initiate a new session with the test TLS server that includes an additional validation error, and observe that the TSF terminates the session.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., decode error, bad certificate) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert).
                      <h:p/>
                      <h:b>Note:</h:b> The intent of this test is to verify the scope of the exception processing. 
                      If verifying certificate status information is claimed as an exception, then this test will verify that a TLS session succeeds when all supported methods for obtaining certificate status information is blocked from the TSF, 
                      to include removing any status information that might be cached by the TSF. 
                      If the exception is limited to specific certificates 
                      (e.g., only leaf certificates are exempt, or only certain leaf certificates are exempt) 
                      the additional validation error could be unavailable revocation information for a non-exempt certificate 
                      (e.g., revocation status information from an intermediate CA is blocked for the issuing CA of an exempt leaf certificate, 
                      or revocation information from the issuing CA is blocked for a non-exempt leaf certificate). 
                      If the only option for the exception is for all revocation information for all certificates, another validation error from FIA_X509_EXT.1 (e.g., certificate expiration, extended key usage, etc.) may be used. 
                    </test>
                  </testlist>
                </test>
              </testlist>
	             </Tests>
            </aactivity>
          </f-element> 
	  <audit-event type="optional">
		<audit-event-descr>Failure to establish a TLS session</audit-event-descr>
		<audit-event-info>Reason for failure.</audit-event-info>
	  </audit-event>
	  <audit-event type="optional">
		<audit-event-descr>Failure to verify presented identifier</audit-event-descr>
		<audit-event-info>Presented identifier and reference identifier.</audit-event-info>
	  </audit-event>
	  <audit-event type="optional">
		<audit-event-descr>Establishment/termination of a TLS session</audit-event-descr>
		<audit-event-info>Non-TOE endpoint of connection.</audit-event-info>
	 </audit-event>
        </f-component>
        
        
        
        <f-component cc-id="fcs_tlsc_ext.2" name="TLS Client Support for Mutual Authentication" status="sel-based">
		  <depends on-sel="tlsc_mutual_auth"/>
          <f-element id="fel-mut-auth-certs">
            <title>The TSF shall support mutual authentication using X.509v3 certificates during the handshake and <selectables>
              <selectable>in support of post-handshake authentication requests</selectable>
              <selectable>at no other time</selectable></selectables>, in accordance with<selectables> 
              <selectable>RFC 5246 section 7.4.4</selectable>
              <selectable>RFC 8446 section 4.3.2</selectable></selectables>.</title>
            <note role="application">
              Clients that support TLS 1.3 and post-handshake authentication claim ‘in support of post-handshake authentication requests’ in the first selection. 
              The ‘at no other time’ selection is claimed for clients only supporting TLS 1.2 or for TLS 1.3 clients that do not support post-handshake authentication.  
              <h:p/>
              The certificate request sent by the server specifies the signature algorithms and certification authorities supported by the server. 
              If the client does not possess a matching certificate, it sends an empty certificate message. 
              The structure of the certificate request message is changed in TLS 1.3 to use the signature_algorithm, signature_algorithm_cert, and certificate_authorities extensions, 
              and RFC 8446 allows for TLS 1.2 implementations to use the new message structure. 
              The ‘RFC 8446 section 4.3.2’ option is claimed in the second selection if TLS 1.3 is supported or if the RFC 8446 method is supported for TLS 1.2 servers. 
              The ‘RFC 5246 section 7.4.4’ option is claimed if the RFC 5246 method is supported for interoperability with TLS 1.2 servers that do not adopt the RFC 8446 method. 
              When mutual authentication is supported, at least one of these methods must be claimed, per the selection.
            </note>
            <aactivity>
              <TSS>
                The evaluator shall ensure that the TSS description required per FIA_X509_EXT.2.1 includes the use of client-side certificates for TLS mutual authentication. 
                The evaluator shall also ensure that the TSS describes any factors beyond configuration that are necessary in order for the client to engage in mutual authentication using X.509v3 certificates.
                <h:p/>
	      </TSS>
              <Guidance>
                The evaluator shall ensure that the operational guidance includes any instructions necessary to configure the TOE to perform mutual authentication. 
                The evaluator also shall verify that the operational guidance required per FIA_X509_EXT.2.1 includes instructions for configuring the client-side certificates for TLS mutual authentication.
                <h:p/>
	      </Guidance>
              <Tests>
                For each supported TLS version, the evaluator shall perform the following tests:
       <testlist>
         <test>The evaluator shall establish a TLS connection from the TSF to a test TLS server that negotiates the tested version 
           and which is not configured for mutual authentication (i.e. does not send Server’s Certificate Request (type 13) message). 
           The evaluator observes negotiation of a TLS channel and confirms that the TOE did not send Client’s Certificate message (type 11) during handshake.</test>
         <test>The evaluator shall establish a connection to a test TLS server with a shared trusted root that is configured for mutual authentication 
           (i.e. it sends Server’s Certificate Request (type 13) message). 
           The evaluator observes negotiation of a TLS channel and confirms that the TOE responds with a non-empty Client’s Certificate message (type 11) and Certificate Verify (type 15) message.</test>
         <test>[Conditional] If the TSF supports post-handshake authentication, 
           the evaluator shall establish a pre-shared key between the TSF and a test TLS 1.3 server. 
           The evaluator shall initiate a TLS session using the pre-shared key and confirm the TSF and test TLS 1.3 server successfully complete the TLS handshake and both support post-handshake authentication. 
           After the session is successfully established, the evaluator shall initiate a certificate request message from the test TLS 1.3 server. 
           The evaluator shall observe that the TSF receives that authentication request 
           and shall take necessary actions, in accordance with AGD guidance, to complete the authentication request. 
           The evaluator shall confirm that the test TLS 1.3 server receives certificate and certificate verification messages from the TSF over the channel that authenticates the client.
           <h:p/>
           <h:b>Note:</h:b> TLS 1.3 certificate requests from the test server and client certificate and certificate verify messages are encrypted. 
           The evaluator confirms that the TSF sends the appropriate messages by examining the messages received at the test TLS 1.3 server and by inspecting any relevant server logs. 
           The evaluator may also take advantage of the calling application to demonstrate that the TOE receives data configured at the test TLS server. 
         </test>
       </testlist>
	      </Tests>
            </aactivity>
          </f-element>
	  <audit-event/>
        </f-component>
	      
        <f-component cc-id="fcs_tlsc_ext.3" name="TLS Client Support for Signature Algorithms Extension" status="sel-based">
          <depends on-sel="tlsc_downgrade_protection"/>
          <f-element>
            <title>The TSF shall not establish a TLS channel if the server hello message includes 
              <selectables>
                <selectable>TLS 1.2 downgrade indicator</selectable>
                <selectable>TLS 1.1 or below downgrade indicator</selectable></selectables>
              in the server random field. </title>
            <note role="application">The ST author claims the “TLS 1.2 downgrade indicator” when FCS_TLSC_EXT.1 indicates support for both TLS 1.3 and supplemental downgrade protection. 
              This option is not claimed if TLS 1.3 is not supported. 
              The “TLS 1.1 or below downgrade indicator” option may be claimed regardless of support for TLS 1.3, 
              but should only be claimed if the TSF is capable of detecting the indicator. 
              As indicated in FCS_TLSC_EXT.1.1, this FP requires the client to terminate TLS 1.1 or below sessions. 
              It is acceptable for the TSF to always terminate TLS 1.1 sessions based on the server hello negotiated version field and ignore any downgrade indicator. 
              However, a product that is capable of detecting the TLS 1.1 or below downgrade indicator may take different actions depending on whether the TLS 1.1 or below downgrade indicator is set. </note>
            <aactivity>
              <TSS>
                The evaluator shall review the TSS and confirm that the description of the TLS client protocol includes the downgrade protection mechanism in accordance with RFC 8446 
                and identifies any configurable features of the TSF needed to meet the requirements. 
                If the ST indicates the TLS 1.1 and below indicator is processed, 
                the evaluator shall confirm that the TSS indicates which configurations allow processing of the downgrade indicator 
                and the specific response of the TSF when it receives the downgrade indicator as opposed to simply terminating the session for unsupported version.
                <h:p/>
	      </TSS>
              <Guidance>
                The evaluator shall review the operational guidance and confirm that any instructions to configure the TSF to meet the requirements are included.
                <h:p/>
	      </Guidance>
              <Tests>
                The evaluator shall perform the following tests to confirm the response to downgrade indicators from a test TLS 1.3 server:
              <testlist>
                <test>[conditional] If the TSF supports TLS 1.3, the evaluator shall initiate a TLS 1.3 session with a test TLS 1.3 server 
                  configured to send a compliant TLS 1.2 server hello (not including any TLS 1.3 extensions) 
                  but including the TLS 1.2 downgrade indicator ‘44 4F 57 4E 47 52 44 01’ in the last eight bytes of the server random field. 
                  The evaluator shall confirm that TSF terminates the session.
                  <h:p/>  
                  <h:b>Note:</h:b> It is preferred that the TSF send a fatal error alert (e.g., illegal parameter), but it is acceptable that the TSF terminate the session without sending an error alert.
                </test>
                <test>[conditional] If the TSF supports the TLS 1.1 or below downgrade indicator and if the ST indicates a configuration where the indicator is processed, 
                  the evaluator shall follow operational guidance instructions to configure the TSF so it parses a TLS 1.1 handshake to detect and process the TLS downgrade indicator. 
                  The evaluator shall initiate a TLS session between the TOE and a test TLS server that is configured to send a TLS 1.1 server hello message 
                  with the downgrade indicator ‘44 4F 57 4E 47 52 44 00’ in the last eight bytes of the server random field, 
                  but which is otherwise compliant with RFC 4346. The evaluator shall observe that the TSF terminates the session as described in the ST.
                  <h:p/>
                  <h:b>Note:</h:b> It is preferred that the TSF send a fatal error alert (illegal parameter or unsupported version), but it is acceptable that the TSF terminate the session without sending an error alert. 
                  <h:p/>
                  <h:b>Note:</h:b> Use of the TLS 1.1 and below indicator as a redundant mechanism 
                  where there is no configuration that actually processes the value does not require additional testing, 
                  since this would be addressed by test 2.1 for FCS_TLSC_EXT.1.1. 
                  This test is only required if the TSF responds differently (e.g., a different error alert) when the downgrade indicator is present than when TLS 1.1 or below is negotiated and the downgrade indicator is not present.
                </test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element> 
	  <audit-event />
        </f-component>
	      
        <f-component cc-id="fcs_tlsc_ext.4" name="TLS Client Support for Renegotiation" status="sel-based">
          <depends on-sel="tlsc_impl"/>
          <f-element id="fel-renego">
            <title>The TSF shall support secure renegotiation through use of <selectables>
              <selectable>the “renegotiation_info” TLS extension</selectable>
              <selectable>use of the TLS_EMPTY_RENEGOTIATION_INFO_SCSV signaling ciphersuite signaling value</selectable></selectables>
           in accordance with RFC 5746, and shall terminate the session if an unexpected server hello is received and <selectables>
             <selectable>hello request message is received</selectable>
             <selectable>in no other case</selectable></selectables>. 
            </title>

            <note role="application">
              A client allowing TLS 1.2 connections may present either the "renegotiation_info" extension or the 
              signaling ciphersuite value TLS_EMPTY_RENEGOTIATION_INFO_SCSV in the initial 
              client hello message to indicate support for secure renegotiation. The ST author claims the methods supported. 
              The TLS_EMPTY_RENEGOTIATION_INFO_SCSV is the preferred mechanism for TLS 1.2 protection against insecure renegotiation when the client does not renegotiate. 
              The ST author will claim the ‘hello request message is received’ option in the second selection to indicate support for this mechanism.
              <h:p/>
              RFC 5746 allows the client to accept connections with servers that do not support the extension; 
              this FP refines RFC 5746 and requires the client to terminate sessions with such servers. 
              Thus, unexpected server hello messages include an initial server hello negotiating 
              TLS 1.2 that does not contain a renegotiation_info extension; 
              an initial server hello negotiating TLS 1.2 that has a renegotiation_info that is non-empty; 
              a subsequent server hello negotiating TLS 1.2 that does not contain a renegotiation_info extension; 
              and a subsequent server hello negotiating TLS 1.2 that has a renegotiation_info extension with an incorrect renegotiated_connection value. 
              <h:p/>
              TLS 1.3 provides protection against insecure renegotiation by not allowing renegotiation. 
              If TLS 1.3 is claimed in FCS_TLSC_EXT.1.1, the client receives a server hello that attempts to negotiate TLS 1.3, and the server hello also contains a renegotiation_info extension, the client will terminate the connection. 
            </note>
            <aactivity>
              <TSS>The evaluator shall examine the ST to ensure that TLS renegotiation protections are described in accordance with the requirements. 
                The evaluator shall ensure that any configurable features of the renegotiation protections are identified.<h:p/></TSS>
              <Guidance>The evaluator shall examine the operational guidance to confirm that instructions for any configurable features of the renegotiation protection mechanisms are included.<h:p/></Guidance>
              <Tests>
                The evaluator shall perform the following tests as indicated. One or both of tests 1 or 2 is required, depending on whether the TSF is configurable to reject renegotiation 
                or supports secure renegotiation methods defined for TLS 1.2. If TLS 1.3 is supported, test 2 is required.
              <testlist>
                <test>[conditional] If the TSF supports a configuration to accept renegotiation requests for TLS 1.2, 
                  the evaluator shall follow any operational guidance to configure the TSF. The evaluator shall perform the following tests:  
                <testlist>
                  <test>The evaluator shall initiate a TLS connection with a test server configured to negotiate a compliant TLS 1.2 handshake. 
                    The evaluator shall inspect the messages received by the test TLS 1.2 server. 
                    The evaluator shall observe that either the “renegotiation_info” field or the SCSV ciphersuite is included in the ClientHello message during the initial handshake.</test>
                  <test>For each of the following sub-tests, the evaluator shall initiate a new TLS connection with a test TLS 1.2 server configured to send a renegotiation_info extension as specified, 
                    but otherwise complete a compliant TLS 1.2 session:
                  <testlist>
                    <test>The evaluator shall configure the test TLS 1.2 server to send a renegotiation_info extension whose value indicates a non-zero length. 
                      The evaluator shall confirm that the TSF terminates the connection. 
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., illegal parameter) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). </test>
                    <test>The evaluator shall configure the test TLS 1.2 server to send a compliant renegotiation_info extension and observe the TSF successfully completes the TLS 1.2 connection.</test>
                    <test>The evaluator shall initiate a session renegotiation after completing a successful handhake with a test TLS 1.2 server that completes a successful TLS 1.2 handshake 
                      (as in test 1.1) and then sends a hello reset request from the test TLS server with a “renegotiation_info” extension that has an unexpected “client_verify_data” or “server_verify_data” 
                      value (modify a byte from a compliant response). The evaluator shall verify that the TSF terminates the connection.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., illegal parameter, handshake error) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                    </test>
                  </testlist>
                  </test>
                </testlist>
                </test>
                <test>[conditional] if the TSF supports a configuration that prevents renegotiation, the evaluator shall perform the following tests:
                  <testlist>
                    <test>[conditional] (TLS 1.2) If the TLS supports a configuration to reject TLS 1.2 renegotiation, 
                      the evaluator shall follow the operational guidance as necessary to prevent renegotiation. 
                      The evaluator shall initiate a TLS session between the so-configured TSF and a test TLS 1.2 server that is configured to perform a compliant handshake, 
                      followed by a hello reset request. The evaluator shall confirm that the TSF completes the initial handshake successfully but terminates the TLS session after receiving the hello reset request.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., unexpected message) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). </test>
                    <test>[conditional] If the TSF supports TLS 1.3, the evaluator shall initiate a TLS session between the TSF and a test TLS 1.3 server that completes a compliant TLS 1.3 handshake, 
                      followed by a hello reset message. The evaluator shall observe that the TSF completes the initial TLS 1.3 handshake successfully, but terminates the session on receiving the hello reset message.
                      <h:p/>
                      <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., unexpected message) in response to this, 
                      but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert).
                    </test>
                  </testlist>
                </test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element>
	  <audit-event />
        </f-component>
	      
        <f-component cc-id="fcs_tlsc_ext.5" name="TLS Client Support for Session Resumption" status="sel-based">
          <depends on-sel="tlsc_resumption"/> 
          <f-element>
          <title>
            The TSF shall support session resumption via the use of <selectables>
              <selectable>session ID in accordance with RFC 5246</selectable>
              <selectable>tickets in accordance with RFC 5077</selectable>
              <selectable id="tlsc_v13_resumption">psk and tickets in accordance with RFC 8446</selectable></selectables>. 
            </title>
            <note role="application">
              The ST author indicates which session resumption mechanisms are supported. 
              One or both of the first two options, ‘session ID…’ and ‘tickets in accordance with RFC 5077’ are claimed for TLS 1.2 resumption. 
              If resumption of TLS 1.3 sessions is supported, ‘psk and tickets…’ is claimed. If ‘psk and tickets…’ is claimed, FCS_TLSC_EXT.6 is also claimed.
              <h:p/>
              While it is possible to perform session resumption using PSK ciphersuites in TLS 1.2, this is uncommon. 
              Validation of key exchange and session negotiation rules for PSK ciphersuites is independent of the source of the pre-shared key and is covered in FCS_TLSC_EXT.1. 
            </note>
            <aactivity>
              <TSS>
                The evaluator shall examine the ST and confirm that the TLS client protocol descriptions includes a description of the supported resumption mechanisms.
                <h:p/>
	      </TSS>
              <Guidance>
                The evaluator shall ensure the instructions for any configurable features of the resumption mechanisms are described.<h:p/>
              </Guidance>
              <Tests>
              The evaluator shall perform the following tests:
              <testlist>
                <test>For each supported TLS version and for each supported resumption mechanism that is supported for that version, 
                  the evaluator shall establish a new TLS session between the TSF and a compliant test TLS server that is configured to negotiate the indicated version 
                  and perform resumption using the indicated mechanism. 
                  The evaluator shall confirm that the TSF completes the initial TLS handshake and shall cause the TSF to close the session normally. 
                  The evaluator shall then cause the TSF to resume the session with the test TLS server using the indicated method, and observe that the TSF successfully establishes the session.
                  <h:p/>
                  <h:b>Note:</h:b> For each method, successful establishment refers to proper use of the mechanism, to include compliant extensions and behavior, as indicated in the referenced RFC.
                </test>
                <test>(TLS 1.3 session id echo) [conditional] If the TSF supports TLS 1.3, the evaluator shall initiate a new TLS 1.3 session with a test TLS server. 
                  The evaluator shall cause the test TLS server to send a TLS 1.3 server hello message 
                  (or a hello retry request if the TSF doesn’t include the key share extension) that contains a different value in the legacy_session_id field, and observe that the TSF terminates the session.
                  <h:b>Note:</h:b> It is preferred that the TSF sends a fatal error (e.g., illegal parameter) in response to this, 
                  but it is acceptable that the TSF terminates the connection silently (i.e. without sending a fatal error alert). 
                </test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element>  
	  <audit-event/>
        </f-component>

        <f-component cc-id="fcs_tlsc_ext.6" name="TLS Client TLS 1.3 Resumption Refinements" status="sel-based">
          <depends on-sel="tlsc_v13_resumption"/> 
          <f-element>
            <title>
              The TSF shall send a psk_key_exchange_mode extension with value psk_dhe when TLS 1.3 session resumption is offered. 
            </title>
          </f-element>
          <f-element>
            <title>
              <title>
                The TSF shall not send early data in TLS 1.3 sessions. 
              </title>
            </title>
            <note role="application">
              This SFR is claimed when session resumption is supported for TLS 1.3. RFC 8446 allows pre-shared keys to be used directly, 
              and allows early data to be protected only using previously established keys. This SFR refines the RFC to use PSK only with a supplemental DHE or ECDHE key exchange to ensure perfect forward secrecy for all sessions. 
            </note>
            <aactivity>
              <TSS>
                The evaluator shall examine the TSS to verify that the TLS client protocol description indicates that the PSK exchange requires DHE mode and prohibits sending early data. 
                The evaluator shall examine the TSS to verify it lists all applications that can be secured by TLS 1.3 using pre-shared keys and 
                describes how each TLS 1.3 client application ensures data for the application is not sent using early data.
                <h:p/>
              </TSS>
              <Guidance>
                The evaluator shall examine the operational guidance to verify that instructions for any configurable features that are required to meet the requirement are included. 
                The evaluator shall ensure the operational guidance includes any instructions required to configure applications so the TLS 1.3 client implementation does not send early data.
                <h:p/>
              </Guidance>
              <Tests>
                [conditional] For each application that is able to be secured via TLS 1.3 using PSK, 
                the evaluator shall follow operational guidance to configure the application not to send early data. 
                The evaluator shall cause the application to initiate a resumed TLS 1.3 session between the TSF and a compliant test TLS 1.3 server as in test 1 of FCS_TLSC_EXT.5. 
                The evaluator shall observe that the TSF client hello for TLS 1.3 includes the psk_mode extension with value PSK_DHE and sends a key share value for a supported group. 
                The evaluator shall confirm that early data is not received by the test TLS server.
                <h:p/>
                <h:b>Note:</h:b> If no applications supported by the TOE provide data to TLS 1.3 that can be sent using PSK, this test is omitted.
              </Tests>
            </aactivity>
          </f-element>  
          <audit-event/>
        </f-component>


        <f-component cc-id="fcs_tlss_ext.1" name="TLS Server Protocol" status="sel-based">
          <depends on-sel="tlss_impl"/>
          <f-element id="fel-tlss-impl">
            <title> The product shall implement TLS 1.2 (RFC 5246) and
            <selectables>
              <selectable>TLS 1.1 (RFC 4346)</selectable>
              <selectable exclusive="yes">no earlier TLS versions</selectable>
            </selectables>
              as a server that supports the ciphersuites
              <selectables linebreak="yes">
                <selectable>TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_256_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5288</selectable>
                <selectable>TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5288</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
              </selectables> and no other ciphersuites,
              and also supports functionality for
              <selectables linebreak="yes">
                <selectable id="tlss_mutual_auth">mutual authentication</selectable>
                <selectable id="tlss_reneg">session renegotiation</selectable>
                <selectable exclusive="yes">none</selectable>
              </selectables>.
            </title>
            <note role="application">

        The ST
        author should select the ciphersuites that are supported,
       and must select at least one ciphersuite.
              It is necessary to limit the ciphersuites that can be
              used in an evaluated configuration administratively on
              the server in the test environment.  If administrative
              steps need to be taken so that the ciphersuites
              negotiated by the implementation are limited to those in
              this requirement, then the appropriate instructions need
              to be contained in the guidance.
	      GCM ciphersuites are preferred over CBC ciphersuites,
	      ECDHE preferred over RSA and DHE, and SHA256 or SHA384
	      over SHA.
        <h:br/><h:br/>
        TLS_RSA_WITH_AES_128_CBC_SHA is not required 
	      despite being mandated by RFC 5246. 
        <h:br/><h:br/>
        These requirements will be revisited as new
	      TLS
	      versions are standardized by the IETF.
        <h:br/><h:br/>
        If <h:i>mutual authentication</h:i> is selected, then the ST must additionally include
        the requirements from FCS_TLSS_EXT.2.  If the TOE implements
        mutual authentication, this selection must be made.
        <h:br/><h:br/>
        If <h:i>session renegotiation</h:i> is selected, then the ST must additionally include
        the requirements from FCS_TLSS_EXT.4. If the TOE implements
        session renegotiation, this selection must be made.
            </note>
            <aactivity level="element">
              <TSS>
              The evaluator shall check the description of the implementation of this protocol in
              the TSS to ensure that
              the ciphersuites supported are specified. The evaluator shall check the
              TSS to ensure that the
              ciphersuites specified include those listed for this component.
	      </TSS>
              <Guidance>
              The evaluator shall
              also check the operational guidance to ensure that it contains instructions on
              configuring the TOE so that
              TLS conforms to the description in the
              TSS.
	      </Guidance>
              <Tests>
              The evaluator shall
              also perform the following tests:
              <testlist>
                <test>
                  The evaluator shall establish a
                  <h:abbr title="Transport Layer Security">TLS</h:abbr> connection using each of the
                  ciphersuites specified by the requirement. This connection may be established as
                  part of the establishment of a higher-level protocol, e.g., as part of an EAP
                  session. It is sufficient to observe the successful negotiation of a ciphersuite
                  to satisfy the intent of the test; it is not necessary to examine the
                  characteristics of the encrypted traffic in an attempt to discern the ciphersuite
                  being used (for example, that the cryptographic algorithm is 128-bit AES and not
                  256-bit AES).
                </test>
                <test>
                  The evaluator shall send a Client Hello to the server with a list of
                  ciphersuites that does not contain any of the ciphersuites in the server’s ST
                  and verify that the server denies the connection. Additionally, the evaluator
                  shall send a Client Hello to the server containing only the
                  TLS_NULL_WITH_NULL_NULL ciphersuite and verify that the server
                  denies the connection.
                </test>
                <test>
		  If RSA key exchange is used in one of the selected ciphersuites, the evaluator shall use a client to send a properly
		  constructed Key Exchange message with a modified
		  EncryptedPreMasterSecret field during the TLS
		  handshake. The evaluator shall verify that the
		  handshake is not completed successfully and no
		  application data flows.
                </test>
                <test>
                  The evaluator shall perform the following modifications to the traffic:
                  <testlist>
                    <test>
                      Modify a byte in the data of the client's Finished handshake message, and verify that the
                      server rejects the connection and does not send any application data.
                    </test>
                    <test>
		      Demonstrate that the TOE will not resume a
		      session for which the client failed to complete
		      the handshake (independent of TOE support for
		      session resumption): 
                    </test>

		    <test>
		      <depends on="tlsc_noresump"/>
		      If the TOE does not support session resumption based on session IDs according to RFC 4346 (TLS 1.1) or RFC 5246 (TLS 1.2) or session tickets according to RFC 5077, the evaluator shall perform the following test:
		    <h:ol type="a">
		      <h:li>The evaluator shall send a Client Hello with a zero-length session identifier and with a SessionTicket extension containing a zero-length ticket.</h:li>
		      <h:li>The evaluator shall verify the server does not send a NewSessionTicket handshake message (at any point in the handshake).</h:li>
		      <h:li> The evaluator shall verify the Server Hello message contains a zero-length session identifier or passes the following steps: <h:br/>
		      Note: The following steps are only performed if the ServerHello message contains a non-zero length SessionID.<h:ol type="i">
		      <h:li>The evaluator shall complete the TLS handshake and capture the SessionID from the ServerHello.</h:li>
		      <h:li>The evaluator shall send a ClientHello containing the SessionID captured in step d). This can be done by keeping the TLS session in step d) open or start a new TLS session using the SessionID captured in step d).</h:li>
		      <h:li>The evaluator shall verify the TOE (1) implicitly rejects the SessionID by sending a ServerHello containing a different SessionID and by performing a full handshake (as shown in Figure 1 of RFC 4346 or RFC 5246), or (2) terminates the connection in some way that prevents the flow of application data.</h:li></h:ol></h:li>
		    </h:ol>
		    </test>

		    <test>
		      <depends on="tlsc_resump_ids"/>
		      If the TOE supports session resumption using session IDs according to RFC 4346 (TLS 1.1) or RFC 5246 (TLS 1.2), the evaluator shall carry out the following steps (note that for each of these tests, it is not necessary to perform the test case for each supported version of TLS):
		      <h:ol type="a">
			<h:li>The evaluator shall conduct a successful handshake and capture the TOE-generated session ID in the Server Hello message. The evaluator shall then initiate a new TLS connection and send the previously captured session ID to show that the TOE resumed the previous session by responding with ServerHello containing the same SessionID immediately followed by ChangeCipherSpec and Finished messages (as shown in Figure 2 of RFC 4346 or RFC 5246).</h:li>

			<h:li>The evaluator shall initiate a handshake and capture the TOE-generated session ID in the Server Hello message. The evaluator shall then, within the same handshake, generate or force an unencrypted fatal Alert message immediately before the client would otherwise send its ChangeCipherSpec message thereby disrupting the handshake. The evaluator shall then initiate a new Client Hello using the previously captured session ID, and verify that the server (1) implicitly rejects the session ID by sending a ServerHello containing a different SessionID and performing a full handshake (as shown in figure 1 of RFC 4346 or RFC 5246), or (2) terminates the connection in some way that prevents the flow of application data.
			</h:li>
		      </h:ol>
		    </test>

		    <test>
		      <depends on="tlsc_resump_tickets"/>
		      If the TOE supports session tickets according to RFC 5077, the evaluator shall carry out the following steps (note that for each of these tests, it is not necessary to perform the test case for each supported version of TLS):
		      <h:ol type="a">
			
			<h:li>The evaluator shall permit a successful TLS handshake to occur in which a session ticket is exchanged with the non-TOE client. The evaluator shall then attempt to correctly reuse the previous session by sending the session ticket in the ClientHello. The evaluator shall confirm that the TOE responds with a ServerHello with an empty SessionTicket extension, NewSessionTicket, ChangeCipherSpec and Finished messages (as seen in figure 2 of RFC 5077).</h:li>

			<h:li> The evaluator shall permit a successful TLS handshake to occur in which a session ticket is exchanged with the non-TOE client. The evaluator will then modify the session ticket and send it as part of a new Client Hello message. The evaluator shall confirm that the TOE either (1) implicitly rejects the session ticket by performing a full handshake (as shown in figure 3 or 4 of RFC 5077), or (2) terminates the connection in some way that prevents the flow of application data.</h:li>
		      </h:ol>
</test>
		    
                    <test>
                      Send a message consisting of random bytes from
                      the client after the client has issued the
                      ChangeCipherSpec message and verify that the
                      server denies the connection.
                    </test>
                  </testlist>
                </test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-deny-outdated">
            <title>The product shall deny connections from clients requesting
            SSL 2.0, SSL 3.0, TLS 1.0 and
              <selectables>
                <selectable>TLS 1.1</selectable>
                <selectable exclusive="yes">none</selectable>
              </selectables>.
            </title>
            <note role="application">All SSL versions are denied. Any TLS version
              not selected in <xref to="fel-tlss-impl"/> should be selected here.
            </note>
            <aactivity level="element">
              <TSS>
              The evaluator shall verify that the TSS contains a
              description of the denial of old SSL and TLS versions
              consistent relative to selections in <xref to="fel-deny-outdated" />.
	      </TSS>
              <Guidance>
              The evaluator shall verify that the AGD guidance includes any configuration
              necessary to meet this requirement.
	      </Guidance>
              <Tests>
              <testlist>
                <test>
                  The evaluator shall send a Client Hello requesting a
                  connection with version SSL 2.0 and verify that the
                  server denies the connection. The evaluator shall
                  repeat this test with SSL 3.0 and TLS 1.0,
                  and TLS 1.1 if it is selected.
                </test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-rsa-size">
            <title>The product shall perform key establishment for TLS using
              <selectables>
                <selectable>RSA with size
                  <selectables>
                    <selectable>2048 bits</selectable>
                    <selectable>3072 bits</selectable>
                    <selectable>4096 bits</selectable>
                    <selectable exclusive="yes">no other sizes</selectable>
                  </selectables>
                </selectable>
                <selectable>Diffie-Hellman parameters with size
                  <selectables>
                    <selectable>2048 bits</selectable>
                    <selectable>3072 bits</selectable>
                    <selectable>4096 bits</selectable>
                    <selectable>6144 bits</selectable>
                    <selectable>8192 bits</selectable>
                    <selectable exclusive="yes">no other sizes</selectable>
                  </selectables>
                </selectable>
                <selectable>Diffie-Hellman groups
                  <selectables>
                    <selectable>ffdhe2048</selectable>
                    <selectable>ffdhe3072</selectable>
                    <selectable>ffdhe4096</selectable>
                    <selectable>ffdhe6144</selectable>
                    <selectable>ffdhe8192</selectable>
                    <selectable exclusive="yes">no other groups</selectable>
                  </selectables>
              </selectable>
              <selectable>ECDHE parameters using elliptic curves
                <selectables>
                  <selectable>secp256r1</selectable>
                  <selectable>secp384r1</selectable>
                  <selectable>secp521r1</selectable>
                </selectables> and no other curves
              </selectable>
              <selectable exclusive="yes">no other key establishment methods</selectable>
            </selectables>.
            </title>
            <note role="application">
              If the ST lists an RSA ciphersuite in <xref to="fel-tlss-impl"/>, the ST must include the
              RSA selection in the requirement.
              <h:br/><h:br/>
              If the ST lists a DHE ciphersuite in <xref to="fel-tlss-impl"/>, the ST must include either
              the Diffie-Hellman selection for parameters of a certain size,
              or for particular Diffie-Hellman groups.
              The selection for "Diffie-Hellman parameters" refers to the method defined by RFC 5246 (and RFC 4346)
              Section 7.4.3 where the server provides Diffie-Hellman parameters to the client. The Supported Groups
              extension defined in RFC 7919 identifies particular Diffie-Hellman groups, which are listed in the
              following selection. Regarding this distinction, it is acceptable to use Diffie-Hellman group 14 with
              TLS (there is currently no ability to negotiate group 14 using the Supported Groups extension, but it
              could be used with the "Diffie-Hellman parameters" selection).  As in RFC 7919, the terms "DHE" and
              "FFDHE" are both used to refer to the finite-field-based Diffie-Hellman ephemeral key exchange mechanism,
              distinct from elliptic-curve-based Diffie Hellman ephemeral key exchange (ECDHE).
              <h:br/><h:br/>
              If the ST lists an ECDHE ciphersuite in <xref to="fel-tlss-impl"/>, the ST must include the
              selection for ECDHE using elliptic curves in the requirement.
            </note>
            <aactivity level="element">
              <TSS>
              The evaluator shall verify that the TSS describes the key agreement parameters
              of the server's Key Exchange message.
	      </TSS>
              <Guidance>
              The evaluator shall verify that any configuration guidance necessary to meet
              the requirement must be contained in the AGD guidance.
	      </Guidance>
              <Tests>
              <testlist>
                The evaluator shall conduct the following tests.  The testing can be carried out
                manually with a packet analyzer or with an automated framework
                that similarly captures such empirical evidence.  Note that this testing can be accomplished in
                conjunction with other testing activities.  For each of the following tests, determining that
                the size matches the expected size is sufficient.
                <test>
                  [conditional] If RSA-based key establishment is selected, the evaluator shall configure the TOE with a
                  certificate containing a supported RSA size and attempt a connection. The evaluator shall verify that
                  the size used matches that which is configured and that the connection is successfully established.
                  The evaluator shall repeat this test for each supported size of RSA-based key establishment. 
                </test>
                <test>
                  [conditional] If finite-field (i.e. non-EC) Diffie-Hellman ciphers are selected, the evaluator shall attempt a
                  connection using a Diffie-Hellman key exchange with a supported
                  parameter size or supported group. The evaluator shall verify that the key agreement parameters in the Key
                  Exchange message are the ones configured. The evaluator shall repeat this test for each supported
                  parameter size or group.
                </test>
                <test>
                  [conditional] If ECDHE ciphers are selected, the evaluator shall attempt a connection
                  using an ECDHE ciphersuite with a
                  supported curve. The evaluator shall verify that the key agreement parameters in the Key
                  Exchange message are the ones configured. The evaluator shall repeat this test for each supported
                  elliptic curve.
                </test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element>
	  <audit-event type="optional">
		<audit-event-descr>Failure to establish a TLS session</audit-event-descr>
		<audit-event-info>Reason for failure</audit-event-info>
	 </audit-event>
        </f-component>

       <f-component cc-id="fcs_tlss_ext.2" name="TLS Server Support for Mutual Authentication" status="sel-based">
         <depends on-sel="tlss_mutual_auth"/>
          <f-element id="fel-auth-client-certs">
            <title>The product shall support authentication of
              TLS clients using X.509v3 certificates.
            </title>
	    <aactivity level="element">
	      Testing of this element is done in conjunction with <xref to="fel-bad-client-cert"/>.
	      <no-tests/>
	    </aactivity>
          </f-element>
          <f-element id="fel-bad-client-cert">
            <title>The product shall not establish a trusted channel
              if the client certificate is invalid.
            </title>
            <note role="application">
              The use of X.509v3 certificates for TLS is addressed in
              FIA_X509_EXT.2.1
              This requirement adds that this use must include support for client-side
              certificates for TLS mutual authentication. Validity is determined by the
              certificate path, the expiration date, and the revocation status in
              accordance with RFC 5280. Certificate validity shall be tested in accordance
              with testing performed for FIA_X509_EXT.1.
            </note>
            <aactivity level="element">
              <TSS>
              The evaluator shall ensure that the TSS description required per FIA_X509_EXT.2.1
              includes the use of client-side certificates for TLS mutual authentication.
	      </TSS>
              <Guidance>
              The evaluator shall verify that the AGD guidance required per FIA_X509_EXT.2.1
              includes instructions for configuring the client-side certificates for TLS mutual
              authentication.  The evaluator shall ensure that the AGD guidance
              includes instructions for configuring the server to require
              mutual authentication of clients using these certificates.
	      </Guidance>
              <Tests>
	      The evaluator shall use TLS as a function to verify that the validation rules in
	      FIA_X509_EXT.1.1 are adhered to and shall perform the following tests.
        The evaluator shall apply the AGD guidance to configure the server
        to require TLS mutual authentication of clients for the following tests,
        unless overridden by instructions in the test activity:
              <testlist>
                <test>
                  The evaluator shall configure the server to send a certificate request
                  to the client.  
                  The client shall send a certificate_list structure which has a length of zero. The evaluator
                  shall verify that the handshake is not finished successfully and no application data flows.
                </test>
                <test>
                  The evaluator shall configure the server to send a certificate request
                  to the client.  
                  The client shall send no client certificate message, and instead send a client key exchange
                  message in an attempt to continue the handshake. The evaluator shall verify that the handshake is
                  not finished successfully and no application data flows.
                </test>
                <test>
                  The evaluator shall configure the server to send a certificate request
                  to the client without the supported_signature_algorithm used by the client’s
                  certificate. The evaluator shall attempt a connection using the client
                  certificate and verify that the handshake is not finished successfully
                  and no application data flows.
                </test>
                <test>
                  The evaluator shall demonstrate that using a certificate without a
                  valid certification path results in the function failing. Using the
                  administrative guidance, the evaluator shall then load a certificate or
                  certificates needed to validate the certificate to be used in the function, and
                  demonstrate that the function succeeds. The evaluator then shall delete one
                  of the certificates, and show that the function fails.
                </test>
                <test>
                  The aim of this test is to check the response of the server
                  when it receives a client identity  certificate that is signed
                  by an impostor CA (either Root CA or intermediate CA). To
                  carry out this test the  evaluator shall configure the client
                  to send a client identity certificate with an issuer field
                  that identifies a  CA recognized by the TOE as a trusted CA,
                  but where the key used for the signature on the client
                  certificate  does not in fact correspond to the CA certificate
                  trusted by the TOE (meaning that the client certificate is
                  invalid  because  its  certification  path  does  not  in
                  fact  terminate  in  the  claimed  CA  certificate).  The
                  evaluator shall verify that the attempted connection is
                  denied.
                </test>
                <test>
                  The evaluator shall configure the client to send a certificate with the
                  Client Authentication purpose in the extendedKeyUsage field and verify that
                  the server accepts the attempted connection. The evaluator shall repeat this
                  test without the Client Authentication purpose and shall verify that the server
                  denies the connection. Ideally, the two certificates should be identical except
                  for the Client Authentication purpose.
                </test>
                <test>
                  The evaluator shall perform the following modifications to the traffic:
                  a) Configure the server to require mutual authentication and then
                  modify a byte in the client’s certificate. The evaluator shall verify
                  that the server rejects the connection.
                  b) Configure the server to require mutual authentication and then
                  modify a byte in the signature block of the client’s Certificate Verify handshake message.
                  The evaluator shall verify that the server rejects the connection.
                </test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-tlss-match-name">
            <title>The product shall not establish a trusted channel if
              the Distinguished Name (DN) or Subject Alternative Name (SAN)
              contained in a certificate does not match one of the expected identifiers
              for the client.
            </title>
            <note role="application">
              The client identifier may be in the Subject field or the Subject
              Alternative Name extension of the certificate. The expected
              identifier may either be configured, may be compared to the
              domain name, IP address, username, or email address used by
              the client, or may be passed to a directory server for comparison.
              In the latter case, the matching itself may be performed outside the TOE.
            </note>
            <aactivity level="element">
              <TSS>
              If the product implements mutual authentication, the evaluator shall
              verify that the TSS describes how the DN and SAN in the certificate
              is compared to the expected identifier.
	      </TSS>
              <Guidance>
              If the DN is not compared automatically to the domain name,
              IP address, username, or email address, the evaluator shall
              ensure that the AGD guidance includes configuration of the
              expected identifier or the directory server for the connection.
	      </Guidance>
              <Tests>
              <testlist>
                <test>
                  The evaluator shall send a client certificate with an identifier that does not match any of the
                  expected identifiers and verify that the server denies the connection. The matching itself
                  might be performed outside the TOE (e.g. when passing the certificate on to a directory server
                  for comparison).
                </test>
              </testlist>
	      </Tests>
            </aactivity>
          </f-element>
	  <audit-event/>
        </f-component>

	<f-component cc-id="fcs_tlss_ext.3" name="TLS Server Support for Signature Algorithms Extension" status="objective">
          <f-element id="fel-tlss-hashalgo">
            <title>The product shall present the HashAlgorithm
            enumeration in supported_signature_algorithms in the
            Certificate Request with the following hash algorithms:
	    <selectables>
	      <selectable>SHA256</selectable>
	      <selectable>SHA384</selectable>
	      <selectable>SHA512</selectable>
	    </selectables> and no other hash algorithms.
            </title>
            <note role="application">
              This requirement limits the hashing algorithms supported
              for the purpose of digital signature verification by the
              server and limits the client to the supported hashes for
              the purpose of digital signature generation by the
              client. The supported_signature_algorithms is only
              supported by TLS 1.2.
	    </note>
	    <aactivity>
        <TSS>
	      The evaluator shall verify that TSS describes the
	      supported_signature_algorithms field of the Certificate
	      Request and whether the required behavior is performed
	      by default or may be configured.
	</TSS>
        <Guidance>
        If the TSS indicates
	      that the supported_signature_algorithms field must be
	      configured to meet the requirement, the evaluator shall
	      verify that AGD guidance includes configuration of the
	      supported_signature_algorithms field.
	</Guidance>
	      <Tests>
	      The evaluator shall also perform the following test:
	      <h:br/>
	      The evaluator shall configure the server to send the
	      signature_algorithms extension in the Certificate
	      Request message indicating that the hash algorithm used
	      by the client’s certificate is not supported.  The
	      evaluator shall attempt a connection using that client
	      certificate and verify that the server denies the
	      client’s connection.
	      </Tests>
	    </aactivity>
	    </f-element>
	   <audit-event />
	</f-component>

	<f-component cc-id="fcs_tlss_ext.4" name="TLS Server Support for Renegotiation" status="sel-based">
    <depends on-sel="tlss_reneg"/>
          <f-element id="fel-tlss-renego">
            <title>The product shall support the "renegotiation_info" TLS extension
              in accordance with RFC 5746.
            </title>
          </f-element>
          <f-element id="fel-tlss-renego-serverhello">
            <title>The product shall include the renegotiation_info extension in
              ServerHello messages.
            </title>
            <note role="application">
              RFC 5746 defines an extension to TLS that binds renegotiation
              handshakes to the cryptography in the original handshake.
	    </note>
	    <aactivity>
        <Tests>
	      The following tests require connection with a client that supports secure
        renegotiation and the "renegotiation_info" extension.
	      <testlist>
		<test>The evaluator shall use a network packet analyzer/sniffer to capture
      the traffic between the two TLS endpoints.  The evaluator shall verify that
      the “renegotiation_info” field is included in the ServerHello message. 
		</test>
		<test>The evaluator shall modify the length portion of the field in the
      ClientHello message in the initial handshake to be non-zero and verify that
      the server sends a failure and terminates the connection.  The evaluator
      shall verify that a properly formatted field results in a successful TLS connection.
		</test>
		<test>The evaluator shall modify the "client_verify_data" or "server_verify_data"
      value in the ClientHello message received during secure renegotiation and
      verify that the server terminates the connection.
		</test>
	      </testlist>
	</Tests>
	    </aactivity>
	    </f-element>
	<audit-event/>
	</f-component>

  <f-component cc-id="fcs_dtlsc_ext.1" name="DTLS Client Protocol" status="sel-based">
    <depends on-sel="dtlsc_impl"/>
    <f-element id="fel-dtlsc-impl">
      <title>The product shall implement DTLS 1.2 (RFC 6347) and
      <selectables>
        <selectable>DTLS 1.0 (RFC 4347)</selectable>
        <selectable exclusive="yes">no earlier DTLS versions</selectable>
      </selectables> as a client that supports the ciphersuites
    <selectables linebreak="yes">
      <selectable>TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
      <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
      <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
      <selectable>TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
      <selectable id="drsadhe1">TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
      <selectable id="drsadhe2">TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
      <selectable id="drsadhe3">TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
      <selectable id="decdhe1">TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
      <selectable id="decdhe2">TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
      <selectable id="decdhe3">TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
      <selectable id="decdhe4">TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
      <selectable id="decdhe5">TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
      <selectable id="decdhe6">TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
      <selectable id="decdhe7">TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
      <selectable id="decdhe8">TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
      </selectables>
      and also supports functionality for 
      <selectables linebreak="yes">
        <selectable id="dtlsc_mutual_auth">mutual authentication</selectable>
        <selectable exclusive="yes">none</selectable>
      </selectables>.
      </title>
      <note role="application">
      If any ECDHE or DHE ciphersuites are selected, then
      FCS_TLSC_EXT.5 is required.
      <h:br/><h:br/>
      If <h:i>mutual authentication</h:i> is selected, then the ST must additionally include 
      the requirements from FCS_DTLSC_EXT.2.
      If the TOE implements
      mutual authentication, this selection must be made.
      <h:br/><h:br/>
      Differences between DTLS 1.2 and TLS 1.2 are outlined in RFC 6347; otherwise the
      protocols are the same.
      All application notes listed for <xref to="fel-client"/> that are relevant
      to DTLS apply to this requirement.
    </note>
      <aactivity level="element">
	<Tests>
        The evaluator shall perform the evaluation activities listed for <xref to="fel-client"/>,
        but ensuring that DTLS (and not TLS) is used in each evaluation activity.
        <h:br/><h:br/>
        For tests which involve version numbers, note that in DTLS the on-the-wire representation
        is the 1's complement of the corresponding textual DTLS version numbers. This is described in
        Section 4.1 of RFC 6347 and RFC 4347.  For example, DTLS 1.0 is represented by the bytes 0xfe 0xff,
        while the undefined DTLS 1.4 would be represented by the bytes 0xfe 0xfb.
	</Tests>
      </aactivity>
    </f-element>

    <f-element id="fel-dtlsc-match-id">
      <title> The product shall verify that the presented identifier matches the reference
        identifier according to RFC 6125. </title>
        <note role="application">
          All application notes listed for <xref to="fel-present-identifier" /> that are relevant
          to DTLS apply to this requirement.
        </note>
      <aactivity level="element">
      <Tests>
	The evaluator shall perform the evaluation activities listed for
	<xref to="fel-present-identifier"/>.
      </Tests>
      </aactivity>
    </f-element>

    <f-element id="fel-dtlsc-bad-cert">
      <title>The product shall not establish a trusted channel if the
        server certificate is invalid
        <selectables>
        <selectable exclusive="yes">with no exceptions</selectable>
        <selectable>except when override is authorized</selectable>
      </selectables>.
      </title>
      <note role="application">
        All application notes listed for <xref to="fel-server-cert" /> that are relevant
        to DTLS apply to this requirement.
      </note>
      <aactivity>
        <Tests>
          The evaluator shall perform the evaluation activities listed for <xref to="fel-server-cert"/>.
	</Tests>
      </aactivity>
    </f-element>
    <f-element id="fel-dtlsc-fail">
    <title>The product shall
    <selectables onlyone="yes">
      <selectable>terminate the DTLS session</selectable>
      <selectable>silently discard the record</selectable>
    </selectables>
    if a message received contains an invalid MAC or if decryption fails in the case of GCM and other
    AEAD ciphersuites.
    </title>
    <aactivity level="element">
      <TSS>
      The evaluator shall verify that the TSS describes the actions that take place if a message
      received from the DTLS Server fails the MAC integrity check.
      </TSS>
      <Tests>
      The evaluator shall establish a connection using a server. The evaluator will then modify
      at least one byte in a record message, and verify that the client discards the record or
      terminates the DTLS session.
      </Tests>
    </aactivity>
  </f-element>
 	<audit-event type="optional">
		<audit-event-descr>Failure of the certificate validity check</audit-event-descr>
		<audit-event-info>Issuer Name and Subject Name of certificate.</audit-event-info>
	</audit-event> 
  </f-component>

  <f-component cc-id="fcs_dtlsc_ext.2" name="DTLS Client Support for Mutual Authentication" status="sel-based">
    <depends on-sel="dtlsc_mutual_auth"/>
          <f-element id="fel-dtlsc-mut-auth">
            <title>
              The product shall support mutual authentication using X.509v3 certificates.
            </title>
            <note role="application">
              All application notes listed for <xref to="fel-mut-auth-certs" /> that are relevant
              to DTLS apply to this requirement.
      </note>
      <aactivity>
	<Tests>
          The evaluator shall perform the evaluation activities listed for <xref to="fel-mut-auth-certs" />.
	</Tests>
      </aactivity>
    </f-element>
	  <audit-event/>
  </f-component>

  <f-component cc-id="fcs_dtlss_ext.1" name="DTLS Server Protocol" status="sel-based">
    <depends on-sel="dtlss_impl"/>
    <f-element id="fel-dtlss-impl">
      <title>The product shall implement DTLS 1.2 (RFC 6347) and
      <selectables>
        <selectable>DTLS 1.0 (RFC 4347)</selectable>
        <selectable exclusive="yes">no earlier DTLS versions</selectable>
      </selectables>
        as a server that supports the ciphersuites
        <selectables linebreak="yes">
          <selectable>TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
          <selectable>TLS_RSA_WITH_AES_256_CBC_SHA as defined in RFC 5246</selectable>
          <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
          <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
          <selectable>TLS_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5288</selectable>
          <selectable>TLS_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
          <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
          <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
          <selectable>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5288</selectable>
          <selectable>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5288</selectable>
          <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
          <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
        </selectables> and no other ciphersuites,
        and also supports functionality for
        <selectables linebreak="yes">
          <selectable id="dtlss_mutual_auth">mutual authentication</selectable>
          <selectable exclusive="yes">none</selectable>
      </selectables>.
      </title>
      <note role="application">
      If <h:i>mutual authentication</h:i> is selected, then the ST must additionally include
      the requirements from FCS_DTLSS_EXT.2.  If the TOE implements
      mutual authentication, this selection must be made.
      <h:br/><h:br/>
      All application notes listed for <xref to="fel-tlss-impl" /> that are relevant
      to DTLS apply to this requirement.
      </note>
      <aactivity level="element">
	<Tests>
        The evaluator shall perform the evaluation activities listed for <xref to="fel-tlss-impl"/>,
        but ensuring that DTLS (and not TLS) is used in each stage of the evaluation activities.
        <h:br/><h:br/>
        For tests which involve version numbers, note that in DTLS the on-the-wire representation
        is the 1's complement of the corresponding textual DTLS version numbers. This is described in
        Section 4.1 of RFC 6347 and RFC 4347.  For example, DTLS 1.0 is represented by the bytes 0xfe 0xff,
        while the undefined DTLS 1.4 would be represented by the bytes 0xfe 0xfb.
	</Tests>
      </aactivity>
    </f-element>
    <f-element id="fel-dtlss-deny-version">
      <title>The product shall deny connections from clients requesting
        <assignable>list of DTLS protocol versions</assignable>.
      </title>
      <note role="application">Any specific DTLS version
        not selected in <xref to="fel-dtlss-impl"/> should be assigned here.
        This version of the FP does not require the server to deny DTLS 1.0, and if the TOE
        supports DTLS 1.0 then "none" can be assigned. In a future version of this FP,
        DTLS 1.0 will be required to be denied.
      </note>
      <aactivity level="element">
        The following evaluation activities shall be conducted unless "none" is assigned.
        <h:br/><h:br/>
        <TSS>
        The evaluator shall verify that the TSS contains a
        description of the denial of old DTLS versions
        consistent relative to selections in <xref to="fel-dtlss-deny-version" />.
	</TSS>
        <Guidance>
        The evaluator shall verify that the AGD guidance includes any configuration
        necessary to meet this requirement.
	</Guidance>
        <Tests>
        <testlist>
          <test>
            The evaluator shall send a Client Hello requesting a
            connection with each version of DTLS specified in the selection
            and verify that the server denies the connection.
          </test>
        </testlist>
	</Tests>
      </aactivity>
    </f-element>

    <f-element id="fel-dtlss-fail-validation">
      <title>
        The product shall not proceed with a connection handshake attempt if the DTLS Client fails validation.
      </title>
      <note role="application">
        The process to validate the IP address of a DTLS client is specified in section 4.2.1 of RFC 6347 (DTLS 1.2) and
        RFC 4347 (DTLS 1.0). The server validates the DTLS client during Connection Establishment (Handshaking) and prior
        to sending a Server Hello message. After receiving a ClientHello, the DTLS Server sends a
        HelloVerifyRequest along with a cookie. The cookie is a signed message using a keyed hash function. The DTLS
        Client then sends another ClientHello with the cookie attached. If the DTLS
        server successfully verifies the signed cookie, the Client is not using a spoofed IP address.
      </note>
      <aactivity level="element">
        <TSS>
        The evaluator shall verify that the TSS describes how the DTLS Client IP address is validated prior to
        issuing a ServerHello message.
	</TSS>
        <Tests>
        Modify at least one byte in the cookie from the Server's HelloVerifyRequest message, and verify that the
        Server rejects the Client's handshake message.
	</Tests>
      </aactivity>
    </f-element>
    <f-element id="fel-dtlss-rsa-keysize">
      <title>The product shall perform key establishment for DTLS using
        <selectables>
          <selectable>RSA with size
            <selectables>
              <selectable>2048 bits</selectable>
              <selectable>3072 bits</selectable>
              <selectable>4096 bits</selectable>
              <selectable exclusive="yes">no other sizes</selectable>
            </selectables>
          </selectable>
          <selectable>Diffie-Hellman parameters with size
            <selectables>
              <selectable>2048 bits</selectable>
              <selectable>3072 bits</selectable>
              <selectable>4096 bits</selectable>
              <selectable>6144 bits</selectable>
              <selectable>8192 bits</selectable>
              <selectable exclusive="yes">no other size</selectable>
            </selectables>
          </selectable>
          <selectable>Diffie-Hellman groups
            <selectables>
              <selectable>ffdhe2048</selectable>
              <selectable>ffdhe3072</selectable>
              <selectable>ffdhe4096</selectable>
              <selectable>ffdhe6144</selectable>
              <selectable>ffdhe8192</selectable>
              <selectable exclusive="yes">no other groups</selectable>
            </selectables>
          </selectable>
          <selectable>ECDHE parameters using elliptic curves
            <selectables>
              <selectable>secp256r1</selectable>
              <selectable>secp384r1</selectable>
              <selectable>secp521r1</selectable>
            </selectables> and no other curves</selectable>
          <selectable exclusive="yes">no other key establishment methods</selectable>
        </selectables>.
      </title>
      <note role="application">
        If the ST lists an RSA ciphersuite in <xref to="fel-dtlss-impl"/>, the ST must include the
        RSA selection in the requirement.
        <h:br/>
        If the ST lists a DHE ciphersuite in <xref to="fel-dtlss-impl"/>, the ST must include either
        the Diffie-Hellman selection for parameters of a certain size,
        or for particular Diffie-Hellman groups.
        <h:br/>
        If the ST lists an ECDHE ciphersuite in <xref to="fel-dtlss-impl"/>, the ST must include the
        NIST curves selection in the requirement.
      </note>
      <aactivity level="element">
      <Tests>
        The evaluator shall perform the evaluation activities listed for <xref to="fel-rsa-size"/>.
      </Tests>
      </aactivity>
    </f-element>
    <f-element id="fel-dtlss-kill-session">
      <title>The product shall
      <selectables onlyone="yes">
        <selectable>terminate the DTLS session</selectable>
        <selectable>silently discard the record</selectable>
      </selectables>
      if a message received contains an invalid MAC or if decryption fails in the case of GCM and other
      AEAD ciphersuites.
      </title>
      <aactivity level="element">
        <TSS>
        The evaluator shall verify that the TSS describes the actions that take place if a message
        received from the DTLS client fails the MAC integrity check.
	</TSS>
        <Tests>
        The evaluator shall establish a connection using a client. The evaluator will then modify
        at least one byte in a record message, and verify that the server discards the record or
        terminates the DTLS session.
	</Tests>
      </aactivity>
    </f-element>
  	<audit-event type="optional">
		<audit-event-descr>Failure of the certificate validity check</audit-event-descr>
		<audit-event-info>Issuer Name and Subject Name of certificate</audit-event-info>
	</audit-event>
  </f-component>

  <f-component cc-id="fcs_dtlss_ext.2" name="DTLS Server Support for Mutual Authentication" status="sel-based">
    <depends on-sel="dtlss_mutual_auth"/>
          <f-element id="fel-dtlss-mut-auth">
            <title>
              The product shall support mutual authentication of DTLS clients using X.509v3 certificates.
            </title>
            <note role="application">
              All application notes listed for <xref to="fel-auth-client-certs" /> that are relevant
              to DTLS apply to this requirement.
      </note>
      <aactivity level="element">
	<Tests>
          The evaluator shall perform the evaluation activities listed for <xref to="fel-auth-client-certs" />.
	</Tests>
      </aactivity>

    </f-element>
    <f-element id="fel-dtlss-bad-cert">
      <title>The product shall not establish a trusted channel
        if the client certificate is invalid.
      </title>
      <note role="application">
        All application notes listed for <xref to="fel-bad-client-cert" /> that are relevant
        to DTLS apply to this requirement.
      </note>
      <aactivity level="element">
	<Tests>
        The evaluator shall perform the evaluation activities listed for <xref to="fel-bad-client-cert" />. 
	</Tests>
      </aactivity>
    </f-element>
    <f-element id="fel-dtlss-bad-name">
      <title>The product shall not establish a trusted channel if
        the Distinguished Name (DN) or Subject Alternative Name (SAN)
        contained in a certificate does not match one of the expected identifiers
        for the client.
      </title>
      <note role="application">
        All application notes listed for <xref to="fel-tlss-match-name" /> that are relevant
        to DTLS apply to this requirement.
      </note>
      <aactivity level="element">
        <Tests>
        The evaluator shall perform the evaluation activities listed for <xref to="fel-tlss-match-name" />.
	</Tests>
      </aactivity>
      </f-element>
	  <audit-event/>
      </f-component>
      </section>

  </sec:Security_Functional_Requirements>
    <bibliography>
      <cc-entry/>
    </bibliography>
</Package>
